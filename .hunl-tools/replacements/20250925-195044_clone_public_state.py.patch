--- a/public_state.py
+++ b/public_state.py
@@ -79,56 +79,56 @@
 		self.last_raiser = int(bb_player)
 		self.current_player = int(self.dealer)
 
-	def clone(self):
-		new_state = PublicState.__new__(PublicState)
-
-		new_state.pot_size = int(self.pot_size)
-		new_state.current_bets = list(self.current_bets)
-		new_state.current_round = int(self.current_round)
-
-		new_state.is_terminal = bool(self.is_terminal)
-		new_state.is_showdown = bool(self.is_showdown)
-		new_state.last_action = copy.deepcopy(self.last_action)
-
-		new_state.deck = list(self.deck)
-		new_state.stacks = list(self.stacks)
-		new_state.initial_stacks = list(self.initial_stacks)
-
-		new_state.small_blind = int(self.small_blind)
-		new_state.big_blind = int(self.big_blind)
-
-		new_state.dealer = int(self.dealer)
-		if self.current_player is None:
-			new_state.current_player = None
-		else:
-			new_state.current_player = int(self.current_player)
-
-		new_state.actions = copy.deepcopy(self.actions)
-		new_state.players_in_hand = list(self.players_in_hand)
-
-		new_state.board_cards = list(self.board_cards)
-		new_state.hole_cards = [
-			list(self.hole_cards[0]),
-			list(self.hole_cards[1]),
-		]
-
-		if self.last_raiser is None:
-			new_state.last_raiser = None
-		else:
-			new_state.last_raiser = int(self.last_raiser)
-
-		new_state.last_raise_increment = int(self.last_raise_increment)
-
-		if self.last_raise_was_allin_below_min is None:
-			new_state.last_raise_was_allin_below_min = None
-		else:
-			new_state.last_raise_was_allin_below_min = int(self.last_raise_was_allin_below_min)
-
-		new_state.total_contrib = list(self.total_contrib)
-		new_state.consecutive_checks = int(self.consecutive_checks)
-		new_state.last_refund_amount = float(self.last_refund_amount)
-
-		return new_state
+    def clone(self):
+        new_state = PublicState.__new__(PublicState)
+
+        new_state.pot_size = int(self.pot_size)
+        new_state.current_bets = list(self.current_bets)
+        new_state.current_round = int(self.current_round)
+
+        new_state.is_terminal = bool(self.is_terminal)
+        new_state.is_showdown = bool(self.is_showdown)
+        new_state.last_action = None
+
+        new_state.deck = list(self.deck)
+        new_state.stacks = list(self.stacks)
+        new_state.initial_stacks = list(self.initial_stacks)
+
+        new_state.small_blind = int(self.small_blind)
+        new_state.big_blind = int(self.big_blind)
+
+        new_state.dealer = int(self.dealer)
+        if self.current_player is None:
+            new_state.current_player = None
+        else:
+            new_state.current_player = int(self.current_player)
+
+        new_state.actions = [tuple(x) for x in self.actions]
+        new_state.players_in_hand = list(self.players_in_hand)
+
+        new_state.board_cards = list(self.board_cards)
+        new_state.hole_cards = [
+            list(self.hole_cards[0]),
+            list(self.hole_cards[1]),
+        ]
+
+        if self.last_raiser is None:
+            new_state.last_raiser = None
+        else:
+            new_state.last_raiser = int(self.last_raiser)
+
+        new_state.last_raise_increment = int(self.last_raise_increment)
+
+        if self.last_raise_was_allin_below_min is None:
+            new_state.last_raise_was_allin_below_min = None
+        else:
+            new_state.last_raise_was_allin_below_min = int(self.last_raise_was_allin_below_min)
+
+        new_state.total_contrib = list(self.total_contrib)
+        new_state.consecutive_checks = int(self.consecutive_checks)
+        new_state.last_refund_amount = float(self.last_refund_amount)
+
+        return new_state
 
 	def _assert_invariants(self, prev_pot=None):
 		ok = True
