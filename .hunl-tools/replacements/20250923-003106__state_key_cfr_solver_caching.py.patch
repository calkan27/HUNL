--- a/cfr_solver_caching.py
+++ b/cfr_solver_caching.py
@@ -77,20 +77,24 @@
 		items.sort(key=lambda x: x[0])
 		return tuple((k, round(v, 12)) for k, v in items)
 
-	def _state_key(self, node):
-		if hasattr(node, "_public_signature"):
-			return node._public_signature()
-		ps = node.public_state
-		return (tuple(ps.board_cards),
-				int(ps.current_round),
-				(int(ps.current_bets[0]), int(ps.current_bets[1])),
-				int(ps.pot_size),
-				int(ps.current_player) if ps.current_player is not None else -1,
-				int(ps.dealer),
-				bool(ps.is_terminal),
-				bool(ps.is_showdown),
-				(bool(ps.players_in_hand[0]), bool(ps.players_in_hand[1])))
-
+    def _state_key(self, node):
+        if hasattr(node, "_public_signature") and hasattr(getattr(node, "public_state", None), "actions"):
+            return node._public_signature()
+        ps = node.public_state
+        cb = getattr(ps, "current_bets", (0, 0))
+        if not isinstance(cb, (tuple, list)) or len(cb) < 2:
+            cb = (int(getattr(ps, "bet0", 0)), int(getattr(ps, "bet1", 0)))
+        return (
+            tuple(getattr(ps, "board_cards", [])),
+            int(getattr(ps, "current_round", getattr(ps, "round_idx", 0))),
+            (int(cb[0]), int(cb[1])),
+            int(getattr(ps, "pot_size", 0)),
+            int(getattr(ps, "current_player", -1)) if getattr(ps, "current_player", None) is not None else -1,
+            int(getattr(ps, "dealer", 0)),
+            bool(getattr(ps, "is_terminal", False)),
+            bool(getattr(ps, "is_showdown", False)),
+            (True, True),
+        )
 
 	def _evaluate_hand_strength(self, hand, public_cards):
 		cache_key = (hand, tuple(public_cards))
