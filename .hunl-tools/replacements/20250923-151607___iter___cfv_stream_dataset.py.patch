--- a/cfv_stream_dataset.py
+++ b/cfv_stream_dataset.py
@@ -25,24 +25,31 @@
 		}
 		for k, v in self.meta.items():
 			self.spec[k] = v
-	def __iter__(self):
-		emitted = 0
-		while emitted < self.num_samples:
-			_ = self.dg.generate_unique_boards(stage=self.stage, num_boards=1)
-			data = self.dg.generate_training_data(stage=self.stage, progress=None)
-			for rec in data:
-				yield {
-					"schema": self.schema_version,
-					"stage": self.stage,
-					"seed": int(self.rng.seed),
-					"input_vector": list(rec["input_vector"]),
-					"target_v1": list(rec["target_v1"]),
-					"target_v2": list(rec["target_v2"]),
-					"pot_spec": self.dg.pot_sampler_spec() if hasattr(self.dg, "pot_sampler_spec") else [],
-					"range_spec": self.dg.range_generator_spec() if hasattr(self.dg, "range_generator_spec") else {"name": "", "params": {}},
-					"generated_at": int(time.time()),
-				}
-				emitted += 1
-				if emitted >= self.num_samples:
-					break
+    def __iter__(self):
+        emitted = 0
+        orig_nb = int(getattr(self.dg, "num_boards", 1))
+        orig_ns = int(getattr(self.dg, "num_samples_per_board", 1))
+        try:
+            self.dg.num_boards = 1
+            self.dg.num_samples_per_board = 1
+            while emitted < self.num_samples:
+                data = self.dg.generate_training_data(stage=self.stage, progress=None)
+                for rec in data:
+                    yield {
+                        "schema": self.schema_version,
+                        "stage": self.stage,
+                        "seed": int(self.rng.seed),
+                        "input_vector": list(rec["input_vector"]),
+                        "target_v1": list(rec["target_v1"]),
+                        "target_v2": list(rec["target_v2"]),
+                        "pot_spec": self.dg.pot_sampler_spec() if hasattr(self.dg, "pot_sampler_spec") else [],
+                        "range_spec": self.dg.range_generator_spec() if hasattr(self.dg, "range_generator_spec") else {"name": "", "params": {}},
+                        "generated_at": int(time.time()),
+                    }
+                    emitted += 1
+                    if emitted >= self.num_samples:
+                        break
+        finally:
+            self.dg.num_boards = orig_nb
+            self.dg.num_samples_per_board = orig_ns
 
