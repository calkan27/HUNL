--- a/data_generator.py
+++ b/data_generator.py
@@ -314,37 +314,30 @@
 			buckets.append(bucket_vector)
 		return buckets
 
-	def prepare_input_vector(self, player_ranges_bucketed, public_cards, pot_size, action_history):
-		total_initial = 2 * self.player_stack
-		if total_initial <= 0:
-			total_initial = 1.0
-
-		pot_norm = pot_size / float(total_initial)
-		pot_vec = [pot_norm]
-
-		board_vec = self.encode_public_cards(public_cards)
-
-		K = self.num_clusters
-
-		if player_ranges_bucketed is None or len(player_ranges_bucketed) < 2:
-			r1_src = []
-			r2_src = []
-		else:
-			r1_src = list(player_ranges_bucketed[0])
-			r2_src = list(player_ranges_bucketed[1])
-
-		r1 = [0.0] * K
-		r2 = [0.0] * K
-
-		for i in range(K):
-			if i < len(r1_src):
-				r1[i] = float(r1_src[i])
-			if i < len(r2_src):
-				r2[i] = float(r2_src[i])
-
-		input_vector = pot_vec + board_vec + r1 + r2
-		return input_vector
-
+    def prepare_input_vector(self, player_ranges_bucketed, public_cards, pot_size, action_history):
+        total_initial = 2 * self.player_stack
+        if total_initial <= 0:
+            total_initial = 1.0
+        pot_norm = pot_size / float(total_initial)
+        pot_vec = [pot_norm]
+        board_vec = self.encode_public_cards(public_cards)
+        K = self.num_clusters
+        if player_ranges_bucketed is None or len(player_ranges_bucketed) < 2:
+            r1_src = []
+            r2_src = []
+        else:
+            r1_src = list(player_ranges_bucketed[0])
+            r2_src = list(player_ranges_bucketed[1])
+        total1 = float(sum(r1_src)) if r1_src else 0.0
+        total2 = float(sum(r2_src)) if r2_src else 0.0
+        r1 = [0.0] * K
+        r2 = [0.0] * K
+        for i in range(K):
+            if i < len(r1_src):
+                r1[i] = (r1_src[i] / total1) if total1 > 0 else 0.0
+            if i < len(r2_src):
+                r2[i] = (r2_src[i] / total2) if total2 > 0 else 0.0
+        return pot_vec + board_vec + r1 + r2
 
 	def encode_public_cards(self, public_cards):
 		card_encoding = {}
