--- a/hand_clusterer.py
+++ b/hand_clusterer.py
@@ -16,86 +16,86 @@
 
 
 class HandClusterer(HandClustererFeaturesMixin, HandClustererUtilsMixin):
-	def __init__(
-		self,
-		cfr_solver: "CFRSolver",
-		num_clusters: int = 10,
-		max_iterations: int = 3,
-		tau_re: float = 0.12,
-		drift_sample_size: int = 200,
-		profile: Optional[str] = None,
-		opp_sample_size: Optional[int] = None,
-		use_cfv_in_features: bool = True,
-		config: Optional[Any] = None,
-	):
-		self._config = config
-		if self._config is not None:
-			self.cfr_solver = cfr_solver
-			self.num_clusters = int(self._config.num_clusters)
-			self.max_iterations = int(max_iterations)
-
-			self.clusters: Optional[Dict[int, Set[str]]] = None
-			self.centroids: Optional[np.ndarray] = None
-			self._cache: Dict[str, np.ndarray] = {}
-			self._cache_hits = 0
-			self._cache_misses = 0
-
-			self._mc_samples_win = int(self._config.mc_samples_win)
-			self._mc_samples_potential = int(self._config.mc_samples_potential)
-
-			self.tau_re = float(self._config.tau_re)
-			self.drift_sample_size = int(self._config.drift_sample_size)
-			self._last_features: Optional[Dict[str, np.ndarray]] = None
-
-			self.profile = self._config.profile
-			self._fast_test_frozen_clusters: Optional[Dict[int, Set[str]]] = None
-			self._fast_test_seed = int(self._config.fast_test_seed)
-			self._fast_test_initialized = False
-
-			if self.profile == "test":
-				self.opp_sample_size = 0 if self._config.opp_sample_size is None else int(self._config.opp_sample_size)
-				self.use_cfv_in_features = False
-				self.tau_re = float("inf")
-			else:
-				self.opp_sample_size = int(self._config.opp_sample_size) if self._config.opp_sample_size is not None else None
-				self.use_cfv_in_features = bool(self._config.use_cfv_in_features)
-
-		else:
-			self.cfr_solver = cfr_solver
-			self.num_clusters = int(num_clusters)
-			self.max_iterations = int(max_iterations)
-
-			self.clusters: Optional[Dict[int, Set[str]]] = None
-			self.centroids: Optional[np.ndarray] = None
-			self._cache: Dict[str, np.ndarray] = {}
-			self._cache_hits = 0
-			self._cache_misses = 0
-
-			self._mc_samples_win = 200
-			self._mc_samples_potential = 200
-			self.tau_re = float(tau_re)
-			self.drift_sample_size = int(drift_sample_size)
-			self._last_features: Optional[Dict[str, np.ndarray]] = None
-
-			env_fast = os.getenv("FAST_TESTS") == "1"
-			self.profile = profile if profile is not None else ("test" if env_fast else "bot")
-
-			self._fast_test_frozen_clusters: Optional[Dict[int, Set[str]]] = None
-			self._fast_test_seed = int(os.getenv("FAST_TEST_SEED", "1729"))
-			self._fast_test_initialized = False
-
-			if self.profile == "test":
-				self._mc_samples_win = 0
-				self._mc_samples_potential = 0
-				if opp_sample_size is None:
-					self.opp_sample_size = 0
-				else:
-					self.opp_sample_size = int(opp_sample_size)
-				self.use_cfv_in_features = False
-				self.tau_re = float("inf")
-			else:
-				self.opp_sample_size = int(opp_sample_size) if opp_sample_size is not None else None
-				self.use_cfv_in_features = bool(use_cfv_in_features)
+    def __init__(
+        self,
+        cfr_solver: "CFRSolver",
+        num_clusters: int = 1000,
+        max_iterations: int = 3,
+        tau_re: float = 0.12,
+        drift_sample_size: int = 200,
+        profile: Optional[str] = None,
+        opp_sample_size: Optional[int] = None,
+        use_cfv_in_features: bool = True,
+        config: Optional[Any] = None,
+    ):
+        self._config = config
+        if self._config is not None:
+            self.cfr_solver = cfr_solver
+            self.num_clusters = int(self._config.num_clusters)
+            self.max_iterations = int(max_iterations)
+
+            self.clusters: Optional[Dict[int, Set[str]]] = None
+            self.centroids: Optional[np.ndarray] = None
+            self._cache: Dict[str, np.ndarray] = {}
+            self._cache_hits = 0
+            self._cache_misses = 0
+
+            self._mc_samples_win = int(self._config.mc_samples_win)
+            self._mc_samples_potential = int(self._config.mc_samples_potential)
+
+            self.tau_re = float(self._config.tau_re)
+            self.drift_sample_size = int(self._config.drift_sample_size)
+            self._last_features: Optional[Dict[str, np.ndarray]] = None
+
+            self.profile = self._config.profile
+            self._fast_test_frozen_clusters: Optional[Dict[int, Set[str]]] = None
+            self._fast_test_seed = int(self._config.fast_test_seed)
+            self._fast_test_initialized = False
+
+            if self.profile == "test":
+                self.opp_sample_size = 0 if self._config.opp_sample_size is None else int(self._config.opp_sample_size)
+                self.use_cfv_in_features = False
+                self.tau_re = float("inf")
+            else:
+                self.opp_sample_size = int(self._config.opp_sample_size) if self._config.opp_sample_size is not None else None
+                self.use_cfv_in_features = bool(self._config.use_cfv_in_features)
+
+        else:
+            self.cfr_solver = cfr_solver
+            self.num_clusters = int(num_clusters)
+            self.max_iterations = int(max_iterations)
+
+            self.clusters: Optional[Dict[int, Set[str]]] = None
+            self.centroids: Optional[np.ndarray] = None
+            self._cache: Dict[str, np.ndarray] = {}
+            self._cache_hits = 0
+            self._cache_misses = 0
+
+            self._mc_samples_win = 200
+            self._mc_samples_potential = 200
+            self.tau_re = float(tau_re)
+            self.drift_sample_size = int(drift_sample_size)
+            self._last_features: Optional[Dict[str, np.ndarray]] = None
+
+            env_fast = os.getenv("FAST_TESTS") == "1"
+            self.profile = profile if profile is not None else ("test" if env_fast else "bot")
+
+            self._fast_test_frozen_clusters: Optional[Dict[int, Set[str]]] = None
+            self._fast_test_seed = int(os.getenv("FAST_TEST_SEED", "1729"))
+            self._fast_test_initialized = False
+
+            if self.profile == "test":
+                self._mc_samples_win = 0
+                self._mc_samples_potential = 0
+                if opp_sample_size is None:
+                    self.opp_sample_size = 0
+                else:
+                    self.opp_sample_size = int(opp_sample_size)
+                self.use_cfv_in_features = False
+                self.tau_re = float("inf")
+            else:
+                self.opp_sample_size = int(opp_sample_size) if opp_sample_size is not None else None
+                self.use_cfv_in_features = bool(use_cfv_in_features)
 
 	def cluster_hands(
 		self,
