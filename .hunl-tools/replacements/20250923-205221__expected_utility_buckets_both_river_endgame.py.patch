--- a/river_endgame.py
+++ b/river_endgame.py
@@ -65,27 +65,27 @@
 		uo = -up
 		return up, uo
 
-	def _expected_utility_buckets_both(self, my_bucket_probs, opp_bucket_probs, B, my_bet, opp_bet):
-		ev_p = 0.0
-		ev_o = 0.0
-		i = 0
-		while i < B:
-			j = 0
-			while j < B:
-				p = my_bucket_probs[i] * opp_bucket_probs[j]
-				if i > j:
-					ev_p += p * opp_bet
-					ev_o += p * (-opp_bet)
-				elif i < j:
-					ev_p += p * (-my_bet)
-					ev_o += p * my_bet
-				else:
-					t = 0.5 * (opp_bet - my_bet)
-					ev_p += p * t
-					ev_o += p * (-t)
-				j += 1
-			i += 1
-		return ev_p, ev_o
+    def _expected_utility_buckets_both(self, my_bucket_probs, opp_bucket_probs, B, pot_size):
+        ev_p = 0.0
+        ev_o = 0.0
+        i = 0
+        while i < B:
+            j = 0
+            while j < B:
+                p = my_bucket_probs[i] * opp_bucket_probs[j]
+                if i > j:
+                    ev_p += p * float(pot_size)
+                    ev_o += p * (-float(pot_size))
+                elif i < j:
+                    ev_p += p * (-float(pot_size))
+                    ev_o += p * float(pot_size)
+                else:
+                    t = 0.5 * float(pot_size)
+                    ev_p += p * t
+                    ev_o += p * (-t)
+                j += 1
+            i += 1
+        return ev_p, ev_o
 
     def compute_cluster_cfvs(self, clusters, node, player, wins_fn, best_hand_fn, hand_rank_fn):
             board = list(node.public_state.board_cards)
