--- a/hand_clusterer.py
+++ b/hand_clusterer.py
@@ -208,28 +208,26 @@
             trials += 1
         return total_improvement / float(trials) if trials > 0 else 0.0
 
-	def _calculate_counterfactual_value(self, hand, board, opponent_range, pot_size):
-		hand_cards = hand.split() if isinstance(hand, str) else list(hand)
-		
-		items = list(opponent_range.items())
-		items = self._maybe_sample_items(items, seed=self._stable_seed(hand, board))
-		
-		total_cfv = 0.0
-		for opp_id, prob in items:
-			if isinstance(opp_id, (int, np.integer)):
-				opp_hands = self.cfr_solver.clusters.get(opp_id, [])
-				if not opp_hands:
-					continue
-				opp_hand_prob = prob / len(opp_hands)
-				for opp_hand_str in list(opp_hands):
-					opp_hand_cards = opp_hand_str.split()
-					payoff = self._calculate_payoff(hand_cards, opp_hand_cards, board, pot_size)
-					total_cfv += opp_hand_prob * payoff
-			else:
-				opp_hand_cards = str(opp_id).split()
-				payoff = self._calculate_payoff(hand_cards, opp_hand_cards, board, pot_size)
-				total_cfv += prob * payoff
-		return total_cfv
+    def _calculate_counterfactual_value(self, hand, board, opponent_range, pot_size):
+        hand_cards = hand.split() if isinstance(hand, str) else list(hand)
+        items = list(opponent_range.items())
+        items = self._maybe_sample_items(items, seed=self._stable_seed(hand, board))
+        total_cfv = 0.0
+        for opp_id, prob in items:
+            if isinstance(opp_id, (int, np.integer)):
+                opp_hands = self.cfr_solver.clusters.get(opp_id, [])
+                if not opp_hands:
+                    continue
+                opp_hand_prob = prob / len(opp_hands)
+                for opp_hand_str in list(opp_hands):
+                    opp_hand_cards = opp_hand_str.split()
+                    payoff = self._calculate_payoff(hand_cards, opp_hand_cards, board, pot_size)
+                    total_cfv += opp_hand_prob * payoff
+            else:
+                opp_hand_cards = str(opp_id).split()
+                payoff = self._calculate_payoff(hand_cards, opp_hand_cards, board, pot_size)
+                total_cfv += prob * payoff
+        return total_cfv
 
 	def _calculate_payoff(self, player_hand, opponent_hand, board, pot_size):
 		result = self.cfr_solver._player_wins(player_hand, opponent_hand, board)
