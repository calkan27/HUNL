--- a/data_generator_datasets.py
+++ b/data_generator_datasets.py
@@ -53,48 +53,52 @@
         finally:
             self._pop_production_mode(guard)
 
-	def generate_flop_dataset(self, num_situations, out_dir, chunk_size=50000, seed=2027, persist_format="npz"):
-		rng = random.Random(int(seed))
-		meta = {
-			"schema": "cfv.dataset.flop.v2",
-			"created_at": int(time.time()),
-			"stage": "flop",
-			"num_clusters": int(self.num_clusters),
-			"pot_sampler": self.pot_sampler_spec(),
-			"range_generator": self.range_generator_spec(),
-		}
-		count = 0
-		chunk = []
-		chunk_idx = 0
-		while count < int(num_situations):
-			node_flop = self._sample_flop_situation(rng)
-			self.cfr_solver.total_iterations = 1000
-			self.cfr_solver.depth_limit = max(1, int(getattr(self, "depth_limit", 1)))
-			t1, t2 = self.cfr_solver.flop_label_targets_using_turn_net(node_flop)
-			bucketed = self.bucket_player_ranges([node_flop.player_ranges[0], node_flop.player_ranges[1]])
-			self._assert_sampler_invariants(
-				node_flop.public_state.board_cards,
-				[{i: bucketed[0][i] for i in range(self.num_clusters)},
-				 {i: bucketed[1][i] for i in range(self.num_clusters)}],
-				node_flop.public_state.pot_size
-			)
-			iv = self.prepare_input_vector(bucketed, node_flop.public_state.board_cards, node_flop.public_state.pot_size, node_flop.public_state.actions)
-			rec = {"input_vector": iv, "target_v1": [float(x) for x in t1], "target_v2": [float(x) for x in t2]}
-			chunk.append(rec)
-			count += 1
-			if len(chunk) >= int(chunk_size):
-				if str(persist_format).lower() == "npz":
-					self._persist_npz_chunk(chunk, out_dir, "flop", chunk_idx, meta)
-				else:
-					self._persist_npz_chunk(chunk, out_dir, "flop", chunk_idx, meta)
-				chunk = []
-				chunk_idx += 1
-		if chunk:
-			if str(persist_format).lower() == "npz":
-				self._persist_npz_chunk(chunk, out_dir, "flop", chunk_idx, meta)
-			else:
-				self._persist_npz_chunk(chunk, out_dir, "flop", chunk_idx, meta)
-		return {"written_chunks": int(chunk_idx + (1 if chunk else 0))}
+    def generate_flop_dataset(self, num_situations, out_dir, chunk_size=50000, seed=2027, persist_format="npz"):
+        rng = random.Random(int(seed))
+        meta = {
+            "schema": "cfv.dataset.flop.v2",
+            "created_at": int(time.time()),
+            "stage": "flop",
+            "num_clusters": int(self.num_clusters),
+            "pot_sampler": self.pot_sampler_spec(),
+            "range_generator": self.range_generator_spec(),
+        }
+        guard = self._push_production_mode()
+        count = 0
+        chunk = []
+        chunk_idx = 0
+        try:
+            while count < int(num_situations):
+                node_flop = self._sample_flop_situation(rng)
+                self.cfr_solver.total_iterations = 1000
+                self.cfr_solver.depth_limit = max(1, int(getattr(self, "depth_limit", 1)))
+                t1, t2 = self.cfr_solver.flop_label_targets_using_turn_net(node_flop)
+                bucketed = self.bucket_player_ranges([node_flop.player_ranges[0], node_flop.player_ranges[1]])
+                self._assert_sampler_invariants(
+                    node_flop.public_state.board_cards,
+                    [{i: bucketed[0][i] for i in range(self.num_clusters)},
+                     {i: bucketed[1][i] for i in range(self.num_clusters)}],
+                    node_flop.public_state.pot_size
+                )
+                iv = self.prepare_input_vector(bucketed, node_flop.public_state.board_cards, node_flop.public_state.pot_size, node_flop.public_state.actions)
+                rec = {"input_vector": iv, "target_v1": [float(x) for x in t1], "target_v2": [float(x) for x in t2]}
+                chunk.append(rec)
+                count += 1
+                if len(chunk) >= int(chunk_size):
+                    if str(persist_format).lower() == "npz":
+                        self._persist_npz_chunk(chunk, out_dir, "flop", chunk_idx, meta)
+                    else:
+                        self._persist_npz_chunk(chunk, out_dir, "flop", chunk_idx, meta)
+                    chunk = []
+                    chunk_idx += 1
+            if chunk:
+                if str(persist_format).lower() == "npz":
+                    self._persist_npz_chunk(chunk, out_dir, "flop", chunk_idx, meta)
+                else:
+                    self._persist_npz_chunk(chunk, out_dir, "flop", chunk_idx, meta)
+            return {"written_chunks": int(chunk_idx + (1 if chunk else 0))}
+        finally:
+            self._pop_production_mode(guard)
 
 	def generate_flop_dataset_using_turn(self, turn_model, num_situations, out_dir=None, chunk_size=50000, seed=2027):
 		rng = random.Random(int(seed))
