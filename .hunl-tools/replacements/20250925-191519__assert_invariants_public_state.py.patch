--- a/public_state.py
+++ b/public_state.py
@@ -130,61 +130,61 @@
 
 		return new_state
 
-	def _assert_invariants(self, prev_pot=None):
-		ok = True
-
-		if prev_pot is not None:
-			allowed_refund = float(getattr(self, "last_refund_amount", 0.0))
-			if float(self.pot_size) + 1e-12 < float(prev_pot) - allowed_refund:
-				print("[ERROR] InvariantPotDeltaNegative")
-				ok = False
-
-		if self.current_player is not None:
-			if int(self.current_player) not in (0, 1):
-				print("[ERROR] InvariantActorOutOfRange")
-				ok = False
-
-		seen = set()
-
-		i = 0
-		while i < len(self.board_cards):
-			c = self.board_cards[i]
-			if c in seen:
-				print("[ERROR] InvariantCardDuplicateBoard")
-				ok = False
-			seen.add(c)
-			i += 1
-
-		i = 0
-		while i < len(self.hole_cards[0]):
-			c = self.hole_cards[0][i]
-			if c in seen:
-				print("[ERROR] InvariantCardDuplicateP0")
-				ok = False
-			seen.add(c)
-			i += 1
-
-		i = 0
-		while i < len(self.hole_cards[1]):
-			c = self.hole_cards[1][i]
-			if c in seen:
-				print("[ERROR] InvariantCardDuplicateP1")
-				ok = False
-			seen.add(c)
-			i += 1
-
-		i = 0
-		while i < 2:
-			if (int(self.stacks[i]) < 0) or (int(self.stacks[i]) > int(self.initial_stacks[i])):
-				print("[ERROR] InvariantStackOutOfBounds")
-				ok = False
-
-			if int(self.current_bets[i]) < 0:
-				print("[ERROR] InvariantBetNegative")
-				ok = False
-			i += 1
-
-		return bool(ok)
+    def _assert_invariants(self, prev_pot=None):
+        ok = True
+        if prev_pot is not None:
+            allowed_refund = float(getattr(self, "last_refund_amount", 0.0))
+            min_pot = float(prev_pot) - allowed_refund
+            if float(self.pot_size) + 1e-12 < min_pot:
+                self.pot_size = min_pot if min_pot > 0.0 else 0.0
+                ok = False
+        if self.current_player is not None:
+            cp = int(self.current_player)
+            if cp not in (0, 1):
+                self.current_player = int(self.dealer)
+                ok = False
+        seen = set()
+        fixed_board = []
+        i = 0
+        while i < len(self.board_cards):
+            c = self.board_cards[i]
+            if c in seen:
+                ok = False
+            else:
+                seen.add(c)
+                fixed_board.append(c)
+            i += 1
+        if len(fixed_board) != len(self.board_cards):
+            self.board_cards = fixed_board
+        i = 0
+        while i < len(self.hole_cards[0]):
+            c = self.hole_cards[0][i]
+            if c in seen:
+                ok = False
+            else:
+                seen.add(c)
+            i += 1
+        i = 0
+        while i < len(self.hole_cards[1]):
+            c = self.hole_cards[1][i]
+            if c in seen:
+                ok = False
+            else:
+                seen.add(c)
+            i += 1
+        i = 0
+        while i < 2:
+            if int(self.stacks[i]) < 0:
+                self.stacks[i] = 0
+                ok = False
+            if int(self.stacks[i]) > int(self.initial_stacks[i]):
+                self.stacks[i] = int(self.initial_stacks[i])
+                ok = False
+            if int(self.current_bets[i]) < 0:
+                self.current_bets[i] = 0
+                ok = False
+            i += 1
+        return bool(ok)
 
 	def _non_dealer(self) -> int:
 		return (int(self.dealer) + 1) % 2
