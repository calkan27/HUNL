--- a/hand_clusterer.py
+++ b/hand_clusterer.py
@@ -95,27 +95,28 @@
 		h = hashlib.md5(key).hexdigest()[:8]
 		return int(h, 16)
 
-	def calculate_hand_features(self, hand, board, opponent_range, pot_size):
-		board_key = ",".join(board)
-		range_sig = self._opponent_range_signature(opponent_range)
-		cache_key = f"hand={hand}|board={board_key}|pot={float(pot_size):.6f}|opp={range_sig}"
-		if cache_key in self._cache:
-			self._cache_hits += 1
-			return self._cache[cache_key]
-		self._cache_misses += 1
-
-		equity = self._calculate_equity(hand, board, opponent_range)
-		potential_equity = self._calculate_potential_equity_improvement(hand, board, opponent_range)
-		if self.use_cfv_in_features:
-			cfv_proxy = self._calculate_counterfactual_value(hand, board, opponent_range, pot_size)
-		else:
-			cfv_proxy = 0.0  
-
-		features = np.array([equity, potential_equity, cfv_proxy], dtype=float)
-		norm = np.linalg.norm(features)
-		features = features / norm if norm > 0.0 else features
-		self._cache[cache_key] = features
-		return features
+    def calculate_hand_features(self, hand, board, opponent_range, pot_size):
+        board_key = ",".join(board)
+        range_sig = self._opponent_range_signature(opponent_range)
+        cache_key = f"hand={hand}|board={board_key}|opp={range_sig}|pot={float(pot_size):.6f}"
+        if cache_key in self._cache:
+            self._cache_hits += 1
+            return self._cache[cache_key]
+        self._cache_misses += 1
+
+        equity = self._calculate_equity(hand, board, opponent_range)
+        potential_equity = self._calculate_potential_equity_improvement(hand, board, opponent_range)
+        if self.use_cfv_in_features:
+            cfv_proxy = self._calculate_counterfactual_value(hand, board, opponent_range, pot_size)
+        else:
+            cfv_proxy = 0.0
+
+        import numpy as _np
+        features = _np.array([equity, potential_equity, cfv_proxy], dtype=float)
+        norm = float(_np.linalg.norm(features))
+        features = (features / norm) if norm > 0.0 else features
+        self._cache[cache_key] = features
+        return features
 
 	def _maybe_sample_items(self, items, seed):
 		if isinstance(items, dict):
