--- a/resolver_integration.py
+++ b/resolver_integration.py
@@ -217,20 +217,19 @@
 
 
 def resolve_at(public_state, r_us: Dict[int, float], w_opp: Dict[int, float], config: Optional[Dict[str, Any]] = None, value_server: Optional[ValueServer] = None) -> Tuple[Dict[Any, float], Dict[int, float], Dict[int, float]]:
-	pol, w_next_raw, our_cfv, diag = resolve_at_with_diag(public_state, r_us, w_opp, config=config, value_server=value_server)
-	cm = str(diag.get("constraint_mode", "sp")).strip().lower()
-	if cm == "sp":
-		w_next = dict(w_next_raw)
-	else:
-		w_next = dict(w_opp)
-	if not diag.get("range_mass_ok", True):
-		raise ValueError("AcceptanceCheckFailed: range_mass")
-	if not diag.get("policy_actions_ok", True):
-		raise ValueError("AcceptanceCheckFailed: action_menu")
-	if not diag.get("turn_leaf_net_ok", True):
-		raise ValueError("AcceptanceCheckFailed: turn_leaf_invoked_net")
-	return pol, w_next, our_cfv
-
+        pol, w_next_raw, our_cfv, diag = resolve_at_with_diag(public_state, r_us, w_opp, config=config, value_server=value_server)
+        cm = str(diag.get("constraint_mode", "sp")).strip().lower()
+        if cm == "sp":
+                w_next = _update_opp_upper_monotone(dict(w_opp or {}), dict(w_next_raw or {}))
+        else:
+                w_next = dict(w_opp or {})
+        if not diag.get("range_mass_ok", True):
+                raise ValueError("AcceptanceCheckFailed: range_mass")
+        if not diag.get("policy_actions_ok", True):
+                raise ValueError("AcceptanceCheckFailed: action_menu")
+        if not diag.get("turn_leaf_net_ok", True):
+                raise ValueError("AcceptanceCheckFailed: turn_leaf_invoked_net")
+        return pol, w_next, our_cfv
 
 def _update_opp_upper_monotone(prev_upper: Dict[int, float], proposed_upper: Dict[int, float]) -> Dict[int, float]:
 	out = {}
