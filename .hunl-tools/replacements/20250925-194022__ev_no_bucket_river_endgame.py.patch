--- a/river_endgame.py
+++ b/river_endgame.py
@@ -294,83 +294,61 @@
 
 		return out
 
-	def _ev_no_bucket(
-		self,
-		clusters,
-		board_list_norm,
-		board_set_upper,
-		my_range,
-		opp_range,
-		wins_fn,
-		resolved_pot,
-	):
-		ev_p_by_cluster = {}
-		ev_o_by_cluster = {}
-
-		for cid in my_range.keys():
-			my_hands = self._filtered_hands_for_cluster(
-				clusters,
-				cid,
-				board_set_upper,
-			)
-
-			if not my_hands:
-				ev_p_by_cluster[int(cid)] = 0.0
-				continue
-			else:
-				ev_total_p = 0.0
-				my_w = 1.0 / float(len(my_hands))
-
-				for my_h in my_hands:
-					c1, c2 = my_h.split()
-					m1 = str(c1)[0].upper() + str(c1)[1].lower()
-					m2 = str(c2)[0].upper() + str(c2)[1].lower()
-					my_cards = [m1, m2]
-
-					for oid, oprob in opp_range.items():
-						if float(oprob) <= 0.0:
-							continue
-						else:
-							opp_hands = self._filtered_hands_for_cluster(
-								clusters,
-								oid,
-								board_set_upper,
-							)
-
-							if not opp_hands:
-								continue
-							else:
-								if len(opp_hands) > 0:
-									opp_w = float(oprob) / float(len(opp_hands))
-								else:
-									opp_w = 0.0
-
-								for o_h in opp_hands:
-									d1, d2 = o_h.split()
-									o1 = str(d1)[0].upper() + str(d1)[1].lower()
-									o2 = str(d2)[0].upper() + str(d2)[1].lower()
-									opp_cards = [o1, o2]
-
-									res = wins_fn(
-										my_cards,
-										opp_cards,
-										list(board_list_norm),
-									)
-									up = self._pairwise_util_p(
-										res,
-										resolved_pot=resolved_pot,
-									)
-
-									ev_total_p += my_w * opp_w * up
-
-									if int(oid) in ev_o_by_cluster:
-										pass
-									else:
-										ev_o_by_cluster[int(oid)] = 0.0
-
-									ev_o_by_cluster[int(oid)] += (
-										my_w * opp_w * (-up)
-									)
-
-				ev_p_by_cluster[int(cid)] = ev_total
-
+    def _ev_no_bucket(self, clusters, board_list_norm, board_set_upper, my_range, opp_range, wins_fn, resolved_pot):
+        ev_p_by_cluster = {}
+        ev_o_by_cluster = {}
+        for cid in my_range.keys():
+            my_hands = self._filtered_hands_for_cluster(clusters, cid, board_set_upper)
+            if not my_hands:
+                ev_p_by_cluster[int(cid)] = 0.0
+                continue
+            else:
+                ev_total_p = 0.0
+                my_w = 1.0 / float(len(my_hands))
+                for my_h in my_hands:
+                    c1, c2 = my_h.split()
+                    m1 = str(c1)[0].upper() + str(c1)[1].lower()
+                    m2 = str(c2)[0].upper() + str(c2)[1].lower()
+                    my_cards = [m1, m2]
+                    for oid, oprob in opp_range.items():
+                        if float(oprob) <= 0.0:
+                            continue
+                        else:
+                            opp_hands = self._filtered_hands_for_cluster(
+                                clusters,
+                                oid,
+                                board_set_upper,
+                            )
+                            if not opp_hands:
+                                continue
+                            else:
+                                if len(opp_hands) > 0:
+                                    opp_w = float(oprob) / float(len(opp_hands))
+                                else:
+                                    opp_w = 0.0
+                                for o_h in opp_hands:
+                                    d1, d2 = o_h.split()
+                                    o1 = str(d1)[0].upper() + str(d1)[1].lower()
+                                    o2 = str(d2)[0].upper() + str(d2)[1].lower()
+                                    opp_cards = [o1, o2]
+                                    res = wins_fn(
+                                        my_cards,
+                                        opp_cards,
+                                        list(board_list_norm),
+                                    )
+                                    up = self._pairwise_util_p(
+                                        res,
+                                        resolved_pot=resolved_pot,
+                                    )
+                                    ev_total_p += my_w * opp_w * up
+                                    if int(oid) in ev_o_by_cluster:
+                                        pass
+                                    else:
+                                        ev_o_by_cluster[int(oid)] = 0.0
+                                    ev_o_by_cluster[int(oid)] += my_w * opp_w * (-up)
+                ev_p_by_cluster[int(cid)] = ev_total_p
+        for k in list(opp_range.keys()):
+            if int(k) not in ev_o_by_cluster:
+                ev_o_by_cluster[int(k)] = 0.0
+        return ev_p_by_cluster, ev_o_by_cluster
+
