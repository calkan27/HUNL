--- a/poker_utils.py
+++ b/poker_utils.py
@@ -30,32 +30,48 @@
 
 
 def _to_str_card(c):
-	if isinstance(c, str):
-		s = c.strip().upper()
-		if len(s) >= 2 and (s[0] in RANKS) and (s[1] in SUITS):
-			return s[0] + s[1]
-		if len(s) >= 2 and (s[0] in SUITS) and (s[1] in RANKS):
-			return s[1] + s[0]
-		if len(s) >= 3 and s[0] == "1" and s[1] == "0" and (s[2] in SUITS):
-			return "T" + s[2]
-		return s[:2]
-
-	if isinstance(c, (list, tuple)):
-		if len(c) >= 2:
-			a = c[0] if isinstance(c[0], str) else str(c[0])
-			b = c[1] if isinstance(c[1], str) else str(c[1])
-			return _to_str_card((a + b))
-		if len(c) == 1:
-			return _to_str_card(str(c[0]))
-
-	s = str(c).strip().upper()
-	if len(s) >= 2 and (s[0] in RANKS) and (s[1] in SUITS):
-		return s[0] + s[1]
-	if len(s) >= 2 and (s[0] in SUITS) and (s[1] in RANKS):
-		return s[1] + s[0]
-	if len(s) >= 3 and s[0] == "1" and s[1] == "0" and (s[2] in SUITS):
-		return "T" + s[2]
-	return s[:2]
+
+    if isinstance(c, str):
+        s = c
+    elif isinstance(c, (list, tuple)):
+        parts = []
+        i = 0
+        while i < len(c):
+            parts.append(_bi.str(c[i]))
+            i += 1
+        s = "".join(parts)
+    else:
+        s = _bi.str(c)
+
+    s = s.strip().upper()
+
+    if len(s) >= 2 and (s[0] in RANKS) and (s[1] in SUITS):
+        return s[0] + s[1]
+    if len(s) >= 2 and (s[0] in SUITS) and (s[1] in RANKS):
+        return s[1] + s[0]
+    if len(s) >= 3 and s[0] == "1" and s[1] == "0" and (s[2] in SUITS):
+        return "T" + s[2]
+
+    r_pick = None
+    t_pick = None
+    i = 0
+    while i < len(s):
+        ch = s[i]
+        if (r_pick is None) and (ch == "1") and (i + 1 < len(s)) and (s[i + 1] == "0"):
+            r_pick = "T"
+            i += 1
+        elif (r_pick is None) and (ch in RANKS):
+            r_pick = ch
+        elif (t_pick is None) and (ch in SUITS):
+            t_pick = ch
+        if (r_pick is not None) and (t_pick is not None):
+            break
+        i += 1
+
+    if (r_pick is not None) and (t_pick is not None):
+        return r_pick + t_pick
+
+    return s[:2]
 
 def _normalize_cards(card_iterable):
 	out = []
