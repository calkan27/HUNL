--- a/test_group_c_value_nets_and_training.py
+++ b/test_group_c_value_nets_and_training.py
@@ -229,14 +229,21 @@
 # -----------------------------------------------------------------------------
 
 def test_train_cfv_network_zero_sum_before_loss_lr_drop_and_early_stop(monkeypatch):
+    import torch
     import cfv_trainer as tr
     import cfv_network as cn
-
     K = 6
-    model = cn.CounterfactualValueNetwork(input_size=1+52+2*K, num_clusters=K)
+    model = cn.CounterfactualValueNetwork(input_size=1 + 52 + 2 * K, num_clusters=K)
+    def make_toy_samples(K, n):
+        samples = []
+        for _ in range(n):
+            x = [0.3] + [0.0] * 52 + ([1.0 / K] * K) + ([1.0 / K] * K)
+            y1 = [0.0] * K
+            y2 = [0.0] * K
+            samples.append({"input_vector": x, "target_v1": y1, "target_v2": y2})
+        return samples
     train = make_toy_samples(K, 8)
     val = make_toy_samples(K, 8)
-
     recorded_lrs = []
     orig_step = torch.optim.Adam.step
     def spy_step(self, *args, **kwargs):
@@ -244,15 +251,12 @@
             recorded_lrs.append(float(self.param_groups[0]["lr"]))
         return orig_step(self, *args, **kwargs)
     monkeypatch.setattr(torch.optim.Adam, "step", spy_step, raising=True)
-
     called = {"train": 0}
     orig_ezs = model.enforce_zero_sum
     def spy_enforce(r1, r2, p1, p2):
         called["train"] += 1
         return orig_ezs(r1, r2, p1, p2)
     monkeypatch.setattr(model, "enforce_zero_sum", spy_enforce, raising=True)
-
-    # Force no improvement after first epoch to deterministically trigger early stop
     orig_eval = tr._eval_loss_cfv
     def plateau_eval(*args, **kwargs):
         th, tm, trm = orig_eval(*args, **kwargs)
@@ -260,7 +264,6 @@
             return 1.0, tm, trm
         return th, tm, trm
     monkeypatch.setattr(tr, "_eval_loss_cfv", plateau_eval, raising=True)
-
     out = tr.train_cfv_network(
         model=model,
         train_samples=train,
@@ -277,7 +280,7 @@
         min_delta=0.0,
     )
     assert len(out["history"]["train_huber"]) < 12
-    assert any(lr == 5e-4 for lr in recorded_lrs)
+    assert any(abs(lr - 5e-4) < 1e-12 for lr in recorded_lrs)
     assert called["train"] > 0
 
 def test_trainer_ranges_from_inputs_slices_correctly():
