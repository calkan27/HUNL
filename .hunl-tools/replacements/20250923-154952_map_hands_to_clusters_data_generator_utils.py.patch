--- a/data_generator_utils.py
+++ b/data_generator_utils.py
@@ -206,28 +206,31 @@
 		pn = float(pot_size) / total_initial
 		return (pn > 0.0) and (pn <= 1.0)
 
-	def map_hands_to_clusters(self, hand_probs: Dict[str, float], clusters: Dict[int, set]) -> Dict[int, float]:
-		out: Dict[int, float] = {}
-		if not hand_probs:
-			return out
-		for h, p in list(hand_probs.items()):
-			key = h if isinstance(h, str) else " ".join(list(h))
-			cid = None
-			for c, hs in clusters.items():
-				if key in hs or h in hs:
-					cid = int(c)
-					break
-			if cid is None:
-				hh = hashlib.sha256(key.encode("utf-8")).hexdigest()
-				cid = int(int(hh, 16) % int(self.num_clusters))
-			if cid not in out:
-				out[cid] = 0.0
-			out[cid] += float(p)
-		s = sum(out.values())
-		if s > 0.0:
-			for k in list(out.keys()):
-				out[k] = out[k] / s
-		return out
+    def map_hands_to_clusters(self, hand_probs: Dict[str, float], clusters: Dict[int, set]) -> Dict[int, float]:
+        out: Dict[int, float] = {}
+        if not hand_probs:
+            return out
+        for h, p in list(hand_probs.items()):
+            key = h if isinstance(h, str) else " ".join(list(h))
+            cid = None
+            for c, hs in clusters.items():
+                if key in hs or h in hs:
+                    cid = int(c)
+                    break
+            if cid is None:
+                hh = hashlib.sha256(key.encode("utf-8")).hexdigest()
+                cid = int(int(hh, 16) % int(self.num_clusters))
+            if cid not in out:
+                out[cid] = 0.0
+            out[cid] += float(p)
+        s = sum(out.values())
+        if s > 0.0:
+            for k in list(out.keys()):
+                out[k] = out[k] / s
+        return out
+
+    def map_handstorcho_clusters(self, hand_probs: Dict[str, float], clusters: Dict[int, set]) -> Dict[int, float]:
+        return self.map_hands_to_clusters(hand_probs, clusters)
 
 	def _push_production_mode(self):
 		snap = {
