--- a/cfr_solver.py
+++ b/cfr_solver.py
@@ -93,24 +93,38 @@
 					cumulative_strategy[cluster_id][action] += strategy[action]
 		return cumulative_strategy
 
-	def load_models(self):
-		files = {
-			'preflop': 'counterfactual_value_network_preflop.pt',
-			'flop': 'counterfactual_value_network_flop.pt',
-			'turn': 'counterfactual_value_network_turn.pt',
-		}
-		for stage, model_path in files.items():
-
-			file_exists = isinstance(model_path, str) and os.path.isfile(model_path)
-			if not file_exists:
-				self.models[stage].eval()
-				self._zero_initialize_model(self.models[stage])
-				print(f"[WARN] Missing CFV model for {stage}: {model_path}. Using deterministic zero-initialized weights.")
-				continue
-			state_dict = torch.load(model_path, map_location=self.device)
-			self.models[stage].load_state_dict(state_dict)
-			self.models[stage].eval()
-			print(f"[OK] Loaded {stage} CFV model from {model_path}.")
+    def load_models(self):
+        files = {
+            'preflop': [
+                'counterfactual_value_network_preflop.pt',
+                'preflop.pt',
+            ],
+            'flop': [
+                'counterfactual_value_network_flop.pt',
+                'flop.pt',
+                'counterfactual_value_network.pt',
+            ],
+            'turn': [
+                'counterfactual_value_network_turn.pt',
+                'turn.pt',
+            ],
+        }
+
+        loaded = {'preflop': False, 'flop': False, 'turn': False}
+
+        for stage, candidates in files.items():
+            ok = self._load_stage_model(stage, candidates)
+            loaded[stage] = bool(ok)
+
+        if not loaded['flop'] or not loaded['turn']:
+            self._share_flop_turn_if_missing()
+
+        if not loaded['preflop']:
+            self.models['preflop'].eval()
+            self._zero_initialize_model(self.models['preflop'])
+            print("[WARN] No preflop weights found; using zero-initialized stub in eval mode.")
+
+        return loaded
 
 	def _zero_initialize_model(self, model):
 		for m in model.modules():
