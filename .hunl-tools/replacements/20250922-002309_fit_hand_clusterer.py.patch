--- a/hand_clusterer.py
+++ b/hand_clusterer.py
@@ -443,31 +443,32 @@
 	def set_num_clusters(self, K):
 		self.num_clusters = int(K)
 		return int(self.num_clusters)
-	def fit(self, hands, board, opponent_range, pot_size, K=None, stage=None):
-		b = list(board) if board is not None else []
-		if stage is None:
-			stage = ("preflop" if len(b) == 0 else ("flop" if len(b) == 3 else ("turn" if len(b) == 4 else "river")))
-		if stage == "preflop":
-			part = self._preflop_partition(hands)
-			self.clusters = part
-			self.num_clusters = len(self.clusters)
-			self.centroids = None
-			self._last_features = None
-			return dict(self.clusters)
-		k_default = 1000
-		K_eff = int(K if K is not None else k_default)
-		if isinstance(hands, (set, dict)):
-			N = len(hands)
-			hlist = list(hands) if not isinstance(hands, dict) else list(hands.keys())
-		else:
-			hlist = list(hands)
-			N = len(hlist)
-		if K_eff > N:
-			K_eff = N
-		self.num_clusters = int(K_eff)
-		cl = self.cluster_hands(hlist, b, opponent_range, pot_size)
-		self.clusters = cl
-		return dict(self.clusters)
+    def fit(self, hands, board, opponent_range, pot_size, K=None, stage=None):
+        b = list(board) if board is not None else []
+        if stage is None:
+            stage = ("preflop" if len(b) == 0 else ("flop" if len(b) == 3 else ("turn" if len(b) == 4 else "river")))
+        if stage == "preflop":
+            part = self._preflop_partition(hands)
+            self.clusters = part
+            self.num_clusters = len(self.clusters)
+            self.centroids = None
+            self._last_features = None
+            return dict(self.clusters)
+        k_default = 1000
+        K_eff = int(K if K is not None else k_default)
+        if isinstance(hands, (set, dict)):
+            N = len(hands)
+            hlist = list(hands) if not isinstance(hands, dict) else list(hands.keys())
+        else:
+            hlist = list(hands)
+            N = len(hlist)
+        if K_eff > N:
+            K_eff = N
+        self.num_clusters = int(K_eff)
+        cl = self.cluster_hands(hlist, b, opponent_range, pot_size)
+        self.clusters = cl
+        return dict(self.clusters)
+
 	def assign(self, hand, board):
 		if self.clusters is None or len(self.clusters) == 0:
 			return 0
