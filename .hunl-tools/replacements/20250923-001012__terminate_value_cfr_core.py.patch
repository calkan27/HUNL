--- a/cfr_core.py
+++ b/cfr_core.py
@@ -45,15 +45,16 @@
 			mask[int(getattr(a, "value", 0))] = True
 		return mask
 
-	def _terminate_value(self, opp_cfv_upper_vec: List[float]) -> float:
-		if not opp_cfv_upper_vec:
-			return 0.0
-		mx = None
-		for v in opp_cfv_upper_vec:
-			fv = float(v)
-			if mx is None or fv > mx:
-				mx = fv
-		return -float(mx if mx is not None else 0.0)
+    def _terminate_value(self, opp_cfv_upper_vec: list[float], r_opp: list[float]) -> float:
+        if not opp_cfv_upper_vec or not r_opp:
+            return 0.0
+        n = min(len(opp_cfv_upper_vec), len(r_opp))
+        s = 0.0
+        i = 0
+        while i < n:
+            s += float(r_opp[i]) * float(opp_cfv_upper_vec[i])
+            i += 1
+        return -float(s)
 
 	def _evaluate_leaf(self, leaf_value_fn, ps, pov_player: int, r_us: List[float], r_opp: List[float]) -> float:
 		v = leaf_value_fn(ps, pov_player, r_us, r_opp)
