--- a/smoke_eval.py
+++ b/smoke_eval.py
@@ -142,65 +142,62 @@
 	return True
 
 def main() -> None:
-	ps = make_clean_state_on_flop(seed=1234)
-	K = 5
-	solver = CFRSolver(depth_limit=1, num_clusters=K)
-	solver.load_models()
-	make_uniform_clusters(solver, K=K)
-	pr0 = uniform_ranges(K)
-	pr1 = uniform_ranges(K)
-
-	node = GameNode(ps)
-	node.player_ranges[0] = pr0.copy()
-	node.player_ranges[1] = pr1.copy()
-
-	vn_counters, vn_orig = instrument_value_nets(solver)
-
-	t0 = time.time()
-	solver.total_iterations = 2
-	solver.run_cfr(node)
-	t1 = time.time()
-
-	zmag = _zero_sum_residual_mag(solver, node)
-	ok_mass = mass_conservation_ok(node, tol=1e-12)
-	ok_pot_once = nonnegative_pot_deltas_ok(ps)
-	ok_pot_seq = pot_monotonicity_ok_sequence(ps, steps=6)
-
-	hr, cache_stats = preflop_cache_hit_rate(solver, GameNode(_make_initial_preflop(200, 777)), trials=6)
-
-	ps_turn = make_clean_state_on_flop(seed=2222)
-	ps_turn.current_round = 2
-	ps_turn.current_bets = [0, 0]
-	ps_turn.pot_size = 0
-	n_turn = GameNode(ps_turn)
-	n_turn.player_ranges[0] = pr0.copy()
-	n_turn.player_ranges[1] = pr1.copy()
-	mean_time_flop = measure_resolve_time(solver, node, trials=3)
-	mean_time_turn = measure_resolve_time(solver, n_turn, trials=3)
-
-	print("==================================== Smoke Evaluation ====================================")
-	print(f"Zero-sum residual magnitude       : {zmag:.6e}")
-	print(f"Bucket mass conservation (bool)   : {ok_mass}")
-	print(f"Pot monotonicity (single step)    : {ok_pot_once}")
-	print(f"Pot monotonicity (multi-step)     : {ok_pot_seq}")
-	print("------------------------------------")
-	print(f"Preflop cache hits                : {cache_stats.get('hits',0)}")
-	print(f"Preflop cache misses              : {cache_stats.get('misses',0)}")
-	print(f"Preflop cache puts                : {cache_stats.get('puts',0)}")
-	print(f"Preflop cache evictions           : {cache_stats.get('evictions',0)}")
-	print(f"Preflop cache hit rate (Δ window) : {hr*100.0:.2f}%")
-	print("------------------------------------")
-	print("Value-network call counts:")
-	print(f"  preflop: {vn_counters.get('preflop',0)}  flop: {vn_counters.get('flop',0)}  turn: {vn_counters.get('turn',0)}  river: {vn_counters.get('river',0)}")
-	print("------------------------------------")
-	print(f"Mean re-solve wall time (flop)    : {mean_time_flop*1000.0:.2f} ms")
-	print(f"Mean re-solve wall time (turn)    : {mean_time_turn*1000.0:.2f} ms")
-	print(f"Single re-solve wall time (first) : {(t1 - t0)*1000.0:.2f} ms")
-	print("==========================================================================================")
-
-	solver.predict_counterfactual_values = vn_orig
-
-
-if __name__ == "__main__":
-	main()
-
+        ps = make_clean_state_on_flop(seed=1234)
+        K = 5
+        solver = CFRSolver(depth_limit=1, num_clusters=K)
+        solver.load_models()
+        make_uniform_clusters(solver, K=K)
+        pr0 = uniform_ranges(K)
+        pr1 = uniform_ranges(K)
+
+        node = GameNode(ps)
+        node.player_ranges[0] = pr0.copy()
+        node.player_ranges[1] = pr1.copy()
+
+        vn_counters, vn_orig = instrument_value_nets(solver)
+
+        t0 = time.time()
+        solver.total_iterations = 2
+        solver.run_cfr(node)
+        t1 = time.time()
+
+        zmag = _zero_sum_residual_mag(solver, node)
+        ok_mass = mass_conservation_ok(node, tol=1e-12)
+        ok_pot_once = nonnegative_pot_deltas_ok(ps)
+        allowed_sparse = {ActionType.FOLD, ActionType.CALL, ActionType.POT_SIZED_BET, ActionType.ALL_IN}
+        ok_pot_seq = pot_monotonicity_ok_sequence(ps, steps=6, allowed_actions=allowed_sparse)
+
+        hr, cache_stats = preflop_cache_hit_rate(solver, GameNode(_make_initial_preflop(200, 777)), trials=6)
+
+        ps_turn = make_clean_state_on_flop(seed=2222)
+        ps_turn.current_round = 2
+        ps_turn.current_bets = [0, 0]
+        ps_turn.pot_size = 0
+        n_turn = GameNode(ps_turn)
+        n_turn.player_ranges[0] = pr0.copy()
+        n_turn.player_ranges[1] = pr1.copy()
+        mean_time_flop = measure_resolve_time(solver, node, trials=3)
+        mean_time_turn = measure_resolve_time(solver, n_turn, trials=3)
+
+        print("==================================== Smoke Evaluation ====================================")
+        print(f"Zero-sum residual magnitude       : {zmag:.6e}")
+        print(f"Bucket mass conservation (bool)   : {ok_mass}")
+        print(f"Pot monotonicity (single step)    : {ok_pot_once}")
+        print(f"Pot monotonicity (multi-step)     : {ok_pot_seq}")
+        print("------------------------------------")
+        print(f"Preflop cache hits                : {cache_stats.get('hits',0)}")
+        print(f"Preflop cache misses              : {cache_stats.get('misses',0)}")
+        print(f"Preflop cache puts                : {cache_stats.get('puts',0)}")
+        print(f"Preflop cache evictions           : {cache_stats.get('evictions',0)}")
+        print(f"Preflop cache hit rate (Δ window) : {hr*100.0:.2f}%")
+        print("------------------------------------")
+        print("Value-network call counts:")
+        print(f"  preflop: {vn_counters.get('preflop',0)}  flop: {vn_counters.get('flop',0)}  turn: {vn_counters.get('turn',0)}  river: {vn_counters.get('river',0)}")
+        print("------------------------------------")
+        print(f"Mean re-solve wall time (flop)    : {mean_time_flop*1000.0:.2f} ms")
+        print(f"Mean re-solve wall time (turn)    : {mean_time_turn*1000.0:.2f} ms")
+        print(f"Single re-solve wall time (first) : {(t1 - t0)*1000.0:.2f} ms")
+        print("==========================================================================================")
+
+        solver.predict_counterfactual_values = vn_orig
+
