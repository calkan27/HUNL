--- a/hand_clusterer_features.py
+++ b/hand_clusterer_features.py
@@ -78,26 +78,38 @@
             n += 1
         return acc / float(n) if n > 0 else 0.0
 
-	def _calculate_counterfactual_value(self, hand: str, board: List[str], opponent_range: Dict[Any, float], pot_size: float) -> float:
-		hand_cards = hand.split() if isinstance(hand, str) else list(hand)
-		items = list(opponent_range.items())
-		items = self._maybe_sample_items(items, seed=self._stable_seed(hand, board))
-		total_cfv = 0.0
-		for opp_id, prob in items:
-			if isinstance(opp_id, (int, np.integer)):
-				opp_hands = self.cfr_solver.clusters.get(int(opp_id), [])
-				if not opp_hands:
-					continue
-				opp_hand_prob = prob / len(opp_hands)
-				for opp_hand_str in list(opp_hands):
-					opp_hand_cards = opp_hand_str.split()
-					payoff = self._calculate_payoff(hand_cards, opp_hand_cards, board, 1.0)
-					total_cfv += opp_hand_prob * payoff
-			else:
-				opp_hand_cards = str(opp_id).split()
-				payoff = self._calculate_payoff(hand_cards, opp_hand_cards, board, 1.0)
-				total_cfv += prob * payoff
-		return total_cfv
+    def _calculate_counterfactual_value(self, hand: str, board: List[str], opponent_range: Dict[Any, float], pot_size: float) -> float:
+        hand_cards = hand.split() if isinstance(hand, str) else list(hand)
+        used = set(hand_cards + board)
+        avail = [c for c in DECK if c not in used]
+        opp_hands = []
+        i = 0
+        while i + 1 < len(avail):
+            a = avail[i]
+            j = i + 1
+            while j < len(avail):
+                b = avail[j]
+                if a != b:
+                    opp_hands.append([a, b])
+                j += 1
+            i += 1
+        if not opp_hands:
+            return 0.0
+        rng = random.Random(self._stable_seed(hand, board))
+        sample_n = min(len(opp_hands), max(1, int(getattr(self, "_mc_samples_win", 200))))
+        if len(opp_hands) > sample_n:
+            opp_hands = rng.sample(opp_hands, sample_n)
+        total = 0.0
+        den = float(len(opp_hands))
+        for oh in opp_hands:
+            res = self.cfr_solver._player_wins(hand_cards, oh, board)
+            if res > 0:
+                total += 1.0
+            elif res < 0:
+                total += -1.0
+            else:
+                total += 0.0
+        return total / den if den > 0 else 0.0
 
 	def _calculate_payoff(self, player_hand: List[str], opponent_hand: List[str], board: List[str], pot_size: float) -> float:
 		result = self.cfr_solver._player_wins(player_hand, opponent_hand, board)
