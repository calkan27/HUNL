--- a/agent.py
+++ b/agent.py
@@ -84,31 +84,28 @@
             node.player_ranges[(public_state.current_player + 1) % 2] = r_opp
 
             self._seed_opponent_cfv_upper(node)
+            self._enforce_action_menu_policy(node.public_state)
 
             self.solver.total_iterations = int(getattr(self.solver, "_round_iters", {}).get(int(public_state.current_round), getattr(self._config, "total_iterations", 1000)))
             act = self.solver.run_cfr(node)
             self.last_public_key = self._public_key(node.public_state)
-            return act
 
-	def _seed_opponent_cfv_upper(self, node):
-		if not hasattr(self.solver, "opponent_cfv_upper_tracking"):
-			self.solver.opponent_cfv_upper_tracking = {}
-		get_key = getattr(self.solver, "_state_key", None)
-		if not callable(get_key):
-			return False
-		cur_key = get_key(node)
-		if cur_key in self.solver.opponent_cfv_upper_tracking:
-			return True
-		if self.last_public_key is not None:
-			try:
-				prev_node = GameNode(node.public_state)
-				setattr(prev_node, "_public_signature", lambda: (tuple(self.last_public_key[0]), int(self.last_public_key[1]), tuple(self.last_public_key[2]), int(self.last_public_key[3]), int(self.last_public_key[4]), int(self.last_public_key[5]), bool(self.last_public_key[6]), bool(self.last_public_key[7]), tuple(self.last_public_key[8]), tuple()))
-				prev_key = get_key(prev_node)
-				prev_upper = dict(getattr(self.solver, "opponent_cfv_upper_tracking", {}).get(prev_key, {}))
-				if prev_upper:
-					self.solver.opponent_cfv_upper_tracking[cur_key] = {int(k): float(v) for k, v in prev_upper.items()}
-					return True
-			except Exception:
-				pass
-		return False
+            diag = self.solver.get_last_diagnostics() if hasattr(self.solver, "get_last_diagnostics") else {}
+            permitted = self._permitted_actions(node.public_state)
+            allowed_now = set(self.solver._allowed_actions_agent(node.public_state)) if hasattr(self.solver, "_allowed_actions_agent") else set()
+            menu_ok = all(a in permitted for a in allowed_now)
+            extra = {
+                    "action_menu_policy": {
+                            "permitted": [int(a.value) for a in permitted],
+                            "allowed_solver": [int(a.value) for a in allowed_now],
+                            "accepted": bool(menu_ok),
+                            "round_flags": {int(k): {"half_pot": bool(v.get("half_pot", False)), "two_pot": bool(v.get("two_pot", False))} for k, v in getattr(self.solver, "_round_actions", {}).items()},
+                    }
+            }
+            if isinstance(diag, dict):
+                    for k, v in extra.items():
+                            diag[k] = v
+            else:
+                    diag = extra
+            return act, dict(diag)
 
