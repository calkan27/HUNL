--- a/cfr_solver_caching.py
+++ b/cfr_solver_caching.py
@@ -38,18 +38,20 @@
 		self._preflop_cache_stats["misses"] += 1
 		return None
 
-	def _preflop_cache_put(self, key, own_range_norm, opp_cfv_vector):
-		if not isinstance(self._preflop_cache, OrderedDict):
-			return
-		entry = {"own_range": dict(own_range_norm), "opp_cfv": dict(opp_cfv_vector)}
-		if key in self._preflop_cache:
-			self._preflop_cache.pop(key)
-		self._preflop_cache[key] = entry
-		self._preflop_cache_stats["puts"] += 1
-		while len(self._preflop_cache) > int(self._preflop_cache_cap):
-			self._preflop_cache.popitem(last=False)
-			self._preflop_cache_stats["evictions"] += 1
-
+    def _preflop_cache_put(self, key, own_range_norm, opp_cfv_vector):
+        if not isinstance(self._preflop_cache, OrderedDict):
+            return
+        entry = {
+            "own_range": {int(k): float(v) for k, v in dict(own_range_norm).items()},
+            "opp_cfv": {int(k): float(v) for k, v in dict(opp_cfv_vector).items()},
+        }
+        if key in self._preflop_cache:
+            self._preflop_cache.pop(key)
+        self._preflop_cache[key] = entry
+        self._preflop_cache_stats["puts"] += 1
+        while len(self._preflop_cache) > int(self._preflop_cache_cap):
+            self._preflop_cache.popitem(last=False)
+            self._preflop_cache_stats["evictions"] += 1
 
 	def _cluster_partition_signature(self):
 		items = []
