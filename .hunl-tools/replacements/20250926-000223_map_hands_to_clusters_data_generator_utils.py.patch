--- a/data_generator_utils.py
+++ b/data_generator_utils.py
@@ -295,45 +295,48 @@
 		pn = float(pot_size) / total_initial
 		return (pn > 0.0) and (pn <= 1.0)
 
-	def map_hands_to_clusters(
-		self,
-		hand_probs: Dict[str, float],
-		clusters: Dict[int, set],
-	) -> Dict[int, float]:
-		out: Dict[int, float] = {}
-
-		if not hand_probs:
-			return out
-
-		for h, p in list(hand_probs.items()):
-			key = h if isinstance(h, str) else " ".join(list(h))
-			cid = None
-
-			for c, hs in clusters.items():
-				if key in hs:
-					cid = int(c)
-					break
-				else:
-					if h in hs:
-						cid = int(c)
-						break
-
-			if cid is None:
-				hh = hashlib.sha256(key.encode("utf-8")).hexdigest()
-				cid = int(int(hh, 16) % int(self.num_clusters))
-
-			if cid not in out:
-				out[cid] = 0.0
-
-			out[cid] += float(p)
-
-		s = sum(out.values())
-
-		if s > 0.0:
-			for k in list(out.keys()):
-				out[k] = out[k] / s
-
-		return out
+    def map_hands_to_clusters(
+        self,
+        hand_probs: Dict[str, float],
+        clusters: Dict[int, set],
+    ) -> Dict[int, float]:
+        out: Dict[int, float] = {}
+        if not hand_probs:
+            return out
+
+        items = []
+        for h, p in hand_probs.items():
+            if isinstance(h, str):
+                key = h
+            else:
+                key = " ".join(list(h))
+            items.append((key, float(p)))
+        items.sort(key=lambda t: t[0])
+
+        cluster_ids_sorted = sorted(int(c) for c in clusters.keys())
+
+        for key, p in items:
+            cid = None
+            for c in cluster_ids_sorted:
+                hs = clusters.get(int(c), set())
+                if key in hs:
+                    cid = int(c)
+                    break
+            if cid is None:
+                hh = hashlib.sha256(key.encode("utf-8")).hexdigest()
+                cid = int(int(hh, 16) % int(self.num_clusters))
+            if cid not in out:
+                out[cid] = 0.0
+            out[cid] += p
+
+        s = 0.0
+        for v in out.values():
+            s += float(v)
+        if s > 0.0:
+            for k in list(out.keys()):
+                out[k] = out[k] / s
+
+        return out
 
 	def map_handstorcho_clusters(
 		self,
