--- a/poker_utils.py
+++ b/poker_utils.py
@@ -61,95 +61,126 @@
 
 
 def _five_card_hand_key(hand5_strs):
-	ranks = []
-	suits = []
-
-	i = 0
-	while i < len(hand5_strs):
-		h = hand5_strs[i]
-		ranks.append(RVAL[h[0]])
-		suits.append(h[1])
-		i += 1
-
-	is_flush = (len(set(suits)) == 1)
-	sh = _straight_high_from_ranks(ranks)
-
-	if is_flush:
-		if sh is not None:
-			if sh == 14:
-				return (9, 14)
-			else:
-				return (8, sh)
-
-	cnt = Counter(ranks)
-	counts = sorted(cnt.values(), reverse=True)
-
-	if counts[0] == 4:
-		quad = max([r for r, c in cnt.items() if c == 4])
-		kick_candidates = []
-		j = 0
-		while j < len(ranks):
-			if ranks[j] != quad:
-				kick_candidates.append(ranks[j])
-			j += 1
-		if kick_candidates:
-			kick = max(kick_candidates)
-		else:
-			kick = max(ranks)
-		return (7, quad, kick)
-
-	if counts == [3, 2]:
-		three = max([r for r, c in cnt.items() if c == 3])
-		pair = max([r for r, c in cnt.items() if c == 2])
-		return (6, three, pair)
-
-	if is_flush:
-		return (5, sorted(ranks, reverse=True))
-
-	if sh is not None:
-		return (4, sh)
-
-	if counts[0] == 3:
-		three = max([r for r, c in cnt.items() if c == 3])
-		kickers = []
-		j = 0
-		while j < len(ranks):
-			if ranks[j] != three:
-				kickers.append(ranks[j])
-			j += 1
-		kickers.sort(reverse=True)
-		return (3, three, kickers)
-
-	if counts == [2, 2, 1]:
-		pairs = [r for r, c in cnt.items() if c == 2]
-		pairs.sort(reverse=True)
-		if pairs:
-			kick = None
-			j = 0
-			while j < len(ranks):
-				if ranks[j] not in pairs:
-					if (kick is None) or (ranks[j] > kick):
-						kick = ranks[j]
-				j += 1
-			if kick is None:
-				kick = max(ranks)
-			return (2, pairs[0], pairs[1], kick)
-		else:
-			return (2, 0, 0, max(ranks))
-
-	if counts[0] == 2:
-		pr = max([r for r, c in cnt.items() if c == 2])
-		kickers = []
-		j = 0
-		while j < len(ranks):
-			if ranks[j] != pr:
-				kickers.append(ranks[j])
-			j += 1
-		kickers.sort(reverse=True)
-		return (1, pr, kickers)
-
-	return (0, sorted(ranks, reverse=True))
-
+        ranks = []
+        suits = []
+
+        i = 0
+        while i < len(hand5_strs):
+                h = hand5_strs[i]
+                ranks.append(RVAL[h[0]])
+                suits.append(h[1])
+                i += 1
+
+        is_flush = (len(set(suits)) == 1)
+
+        u = sorted(set(ranks))
+        if len(u) == 5:
+                if u == [2, 3, 4, 5, 14]:
+                        straight_high = 5
+                else:
+                        ok = True
+                        j = 0
+                        while j < 4:
+                                if (u[j + 1] - u[j]) != 1:
+                                        ok = False
+                                        break
+                                j += 1
+                        if ok:
+                                straight_high = u[-1]
+                        else:
+                                straight_high = None
+        else:
+                straight_high = None
+
+        if is_flush:
+                if straight_high is not None:
+                        if straight_high == 14:
+                                return (9, 14)
+                        else:
+                                return (8, straight_high)
+
+        counts = {}
+        j = 0
+        while j < len(ranks):
+                v = ranks[j]
+                if v in counts:
+                        counts[v] = counts[v] + 1
+                else:
+                        counts[v] = 1
+                j += 1
+
+        sorted_counts = sorted(counts.items(), key=lambda x: (-x[1], -x[0]))
+        cvec = sorted([c for _, c in counts.items()], reverse=True)
+
+        if cvec[0] == 4:
+                quad = None
+                kickers = []
+                for r, c in counts.items():
+                        if c == 4:
+                                if (quad is None) or (r > quad):
+                                        quad = r
+                        else:
+                                kickers.append(r)
+                kick = max(kickers) if kickers else max(ranks)
+                return (7, quad, kick)
+
+        if cvec == [3, 2]:
+                three = None
+                pair = None
+                for r, c in counts.items():
+                        if c == 3:
+                                if (three is None) or (r > three):
+                                        three = r
+                        elif c == 2:
+                                if (pair is None) or (r > pair):
+                                        pair = r
+                return (6, three, pair)
+
+        if is_flush:
+                return (5, sorted(ranks, reverse=True))
+
+        if straight_high is not None:
+                return (4, straight_high)
+
+        if cvec[0] == 3:
+                three = None
+                kickers = []
+                for r, c in counts.items():
+                        if c == 3:
+                                if (three is None) or (r > three):
+                                        three = r
+                        else:
+                                kickers.append(r)
+                kickers.sort(reverse=True)
+                return (3, three, kickers)
+
+        if cvec == [2, 2, 1]:
+                pairs = []
+                kicker = None
+                for r, c in counts.items():
+                        if c == 2:
+                                pairs.append(r)
+                        else:
+                                if (kicker is None) or (r > kicker):
+                                        kicker = r
+                pairs.sort(reverse=True)
+                if kicker is None:
+                        kicker = max(ranks)
+                return (2, pairs[0], pairs[1], kicker)
+
+        if cvec[0] == 2:
+                pair = None
+                kickers = []
+                for r, c in counts.items():
+                        if c == 2:
+                                if (pair is None) or (r > pair):
+                                        pair = r
+                        else:
+                                kickers.append(r)
+                kickers.sort(reverse=True)
+                return (1, pair, kickers)
+
+        return (0, sorted(ranks, reverse=True))
 
 def _best_five_from_seven_key(hole_or_five, board):
 	cards7 = _normalize_cards(list(hole_or_five) + list(board))
