--- a/hand_clusterer_features.py
+++ b/hand_clusterer_features.py
@@ -6,23 +6,23 @@
 
 
 class HandClustererFeaturesMixin:
-	def calculate_hand_features(self, hand: str, board: List[str], opponent_range: Dict[Any, float], pot_size: float) -> np.ndarray:
-		board_key = ",".join(board)
-		opp_sig = self._opponent_range_signature(opponent_range)
-		cache_key = f"specP3.1|hand={hand}|board={board_key}|pot={float(pot_size):.6f}|opp={opp_sig}"
-		if cache_key in self._cache:
-			self._cache_hits += 1
-			return self._cache[cache_key]
-		self._cache_misses += 1
-		eq = float(self._calculate_equity(hand, board, opponent_range))
-		deq = float(self._calculate_potential_equity_improvement(hand, board, opponent_range))
-		cfv = float(self._calculate_counterfactual_value(hand, board, opponent_range, pot_size))
-		vec = np.asarray([eq, deq, cfv], dtype=float)
-		n = float(np.linalg.norm(vec))
-		if n > 0.0:
-			vec = vec / n
-		self._cache[cache_key] = vec
-		return vec
+    def calculate_hand_features(self, hand: str, board: List[str], opponent_range: Dict[Any, float], pot_size: float) -> np.ndarray:
+        board_key = ",".join(board)
+        opp_sig = self._opponent_range_signature(opponent_range)
+        cache_key = f"specP3.1|hand={hand}|board={board_key}|pot={float(pot_size):.6f}|opp={opp_sig}"
+        if cache_key in self._cache:
+            self._cache_hits += 1
+            return self._cache[cache_key]
+        self._cache_misses += 1
+        eq = float(self._calculate_equity(hand, board, opponent_range))
+        deq = float(self._calculate_potential_equity_improvement(hand, board, opponent_range))
+        cfv = float(self._calculate_counterfactual_value(hand, board, opponent_range, pot_size))
+        vec = np.asarray([eq, deq, cfv], dtype=float)
+        n = float(np.linalg.norm(vec))
+        if n > 0.0:
+            vec = vec / n
+        self._cache[cache_key] = vec
+        return vec
 
 	def calculate_hand_features(self, hand: str, board: List[str], opponent_range: Dict[Any, float], pot_size: float) -> np.ndarray:
 		board_key = ",".join(board)
