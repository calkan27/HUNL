--- a/config_io.py
+++ b/config_io.py
@@ -39,134 +39,24 @@
 
 
 def compose_resolve_config_from_yaml(abstraction_yaml_path, value_nets_yaml_path, solver_yaml_path, overrides=None):
-	abst = load_config(abstraction_yaml_path) if abstraction_yaml_path else {}
-	vnets = load_config(value_nets_yaml_path) if value_nets_yaml_path else {}
-	solv = load_config(solver_yaml_path) if solver_yaml_path else {}
-	if not isinstance(abst, dict):
-		abst = {}
-	if not isinstance(vnets, dict):
-		vnets = {}
-	if not isinstance(solv, dict):
-		solv = {}
+        abst = load_config(abstraction_yaml_path) if abstraction_yaml_path else {}
+        vnets = load_config(value_nets_yaml_path) if value_nets_yaml_path else {}
+        solv = load_config(solver_yaml_path) if solver_yaml_path else {}
+        if not isinstance(abst, dict):
+                abst = {}
+        if not isinstance(vnets, dict):
+                vnets = {}
+        if not isinstance(solv, dict):
+                solv = {}
 
-	seed = None
-	for d in (abst, vnets, solv):
-		if isinstance(d, dict) and "seed" in d and d["seed"] is not None:
-			try:
-				seed = int(d["seed"])
-				break
-			except Exception:
-				pass
-	if seed is None:
-		seed = int(os.environ.get("FAST_TEST_SEED", "1729"))
-	set_global_seed(seed)
+        seed = _resolve_seed_from_dicts(abst, vnets, solv)
+        set_global_seed(seed)
 
-	cfg = ResolveConfig.from_env(overrides or {})
+        cfg = ResolveConfig.from_env(overrides or {})
+        cfg = _apply_abstraction_to_cfg(cfg, abst)
+        cfg = _apply_value_nets_to_cfg(cfg, vnets)
+        cfg = _apply_solver_to_cfg(cfg, solv)
 
-	if isinstance(abst, dict):
-		if "bucket_counts" in abst and isinstance(abst["bucket_counts"], dict):
-			for k in ("turn", "flop", "preflop"):
-				try:
-					if k == "turn" and "turn" in abst["bucket_counts"]:
-						cfg.num_clusters = int(abst["bucket_counts"]["turn"])
-						break
-					if k == "flop" and "flop" in abst["bucket_counts"]:
-						cfg.num_clusters = int(abst["bucket_counts"]["flop"])
-						break
-				except Exception:
-					pass
-		if "tau_re" in abst:
-			try:
-				cfg.tau_re = float(abst["tau_re"])
-			except Exception:
-				pass
-		if "drift_sample_size" in abst:
-			try:
-				cfg.drift_sample_size = int(abst["drift_sample_size"])
-			except Exception:
-				pass
-		if "use_cfv_in_features" in abst:
-			try:
-				cfg.use_cfv_in_features = bool(abst["use_cfv_in_features"])
-			except Exception:
-				pass
+        runtime_overrides = _extract_runtime_overrides(solv)
+        return {"seed": int(seed), "config": cfg, "runtime_overrides": runtime_overrides}
 
-	if isinstance(vnets, dict):
-		if "outer_zero_sum" in vnets:
-			try:
-				cfg.enforce_zero_sum_outer = bool(vnets["outer_zero_sum"])
-			except Exception:
-				cfg.enforce_zero_sum_outer = True
-		if "mc_samples_win" in vnets:
-			try:
-				cfg.mc_samples_win = int(vnets["mc_samples_win"])
-			except Exception:
-				pass
-		if "mc_samples_potential" in vnets:
-			try:
-				cfg.mc_samples_potential = int(vnets["mc_samples_potential"])
-			except Exception:
-				pass
-		lr_sched = vnets.get("lr_schedule", {})
-		if isinstance(lr_sched, dict):
-			for k_yaml, k_cfg in (("initial", "lr_initial"), ("after", "lr_after"), ("drop_epoch", "lr_drop_epoch")):
-				if k_yaml in lr_sched:
-					try:
-						setattr(cfg, k_cfg, float(lr_sched[k_yaml]) if "lr" in k_cfg else int(lr_sched[k_yaml]))
-					except Exception:
-						pass
-		if "batch_size" in vnets:
-			try:
-				cfg.batch_size = int(vnets["batch_size"])
-			except Exception:
-				pass
-
-	runtime_overrides = {}
-
-	if isinstance(solv, dict):
-		if "depth_limit" in solv:
-			try:
-				cfg.depth_limit = int(solv["depth_limit"])
-			except Exception:
-				pass
-		if "total_iterations" in solv:
-			try:
-				cfg.total_iterations = int(solv["total_iterations"])
-			except Exception:
-				pass
-		if "bet_size_mode" in solv:
-			try:
-				cfg.bet_size_mode = str(solv["bet_size_mode"])
-			except Exception:
-				pass
-		if "profile" in solv:
-			try:
-				cfg.profile = str(solv["profile"])
-			except Exception:
-				pass
-		iters_per_round = solv.get("iterations_per_round", {})
-		if isinstance(iters_per_round, dict):
-			try:
-				runtime_overrides["_round_iters"] = {int(k): int(v) for k, v in iters_per_round.items()}
-			except Exception:
-				pass
-		round_actions = solv.get("round_actions", {})
-		if isinstance(round_actions, dict):
-			try:
-				runtime_overrides["_round_actions"] = {
-					int(r): {
-						"half_pot": bool(v.get("half_pot", True)),
-						"two_pot": bool(v.get("two_pot", False))
-					} for r, v in round_actions.items()
-				}
-			except Exception:
-				pass
-		bet_fracs = solv.get("bet_fractions", {})
-		if isinstance(bet_fracs, dict):
-			try:
-				cfg.bet_fractions = {int(r): [float(x) for x in bet_fracs[str(r)] if x is not None] if str(r) in bet_fracs else [0.5, 1.0] for r in (0,1,2,3)}
-			except Exception:
-				cfg.bet_fractions = {1: [0.5, 1.0], 2: [0.5, 1.0, 2.0]}
-
-	return {"seed": int(seed), "config": cfg, "runtime_overrides": runtime_overrides}
-
