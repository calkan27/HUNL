--- a/cfr_core.py
+++ b/cfr_core.py
@@ -133,42 +133,46 @@
         ps = tree["nodes"][idx].public_state
         return self._evaluate_leaf(leaf_value_fn, ps, pov_player, r_us, r_opp) * (iw_c if self.use_iw else 1.0)
 
-	def solve_subgame(self, root_node: Dict[str, Any], r_us: List[float], r_opp: List[float], opp_cfv_constraints: List[float], T: int, leaf_value_fn) -> Tuple[Dict[Any, float], Dict[int, float], Dict[int, float]]:
-		self.regret.clear()
-		self.strat_sum.clear()
-		root_idx = 0
-		pov_player = int(root_node["nodes"][root_idx].public_state.current_player)
-		iters = int(T)
-		if iters <= 0:
-			iters = 1
-		for _ in range(iters):
-			self._external_sample_traverse(
-				tree=root_node,
-				idx=root_idx,
-				pov_player=pov_player,
-				r_us=list(r_us),
-				r_opp=list(r_opp),
-				opp_cfv_upper_vec=list(opp_cfv_constraints or []),
-				leaf_value_fn=leaf_value_fn,
-				iw_c=1.0
-			)
-		menu0 = root_node["menus"][root_idx]
-		Aall = max(1, max((int(getattr(a, "value", 0)) for a in menu0), default=0) + 1)
-		key0 = self._infoset_key(root_node, root_idx, pov_player)
-		if key0 not in self.strat_sum:
-			k = max(1, len(menu0))
-			root_policy = {a: 1.0 / float(k) for a in menu0}
-		else:
-			ss = self.strat_sum[key0]
-			s = sum(ss[int(getattr(a, "value", 0))] for a in menu0)
-			if s <= 0.0:
-				k = max(1, len(menu0))
-				root_policy = {a: 1.0 / float(k) for a in menu0}
-			else:
-				root_policy = {a: ss[int(getattr(a, "value", 0))] / s for a in menu0}
-		node_values: Dict[int, float] = {}
-		opp_cfv: Dict[int, float] = {i: float(opp_cfv_constraints[i]) for i in range(len(opp_cfv_constraints or []))}
-		return root_policy, node_values, opp_cfv
+    def solve_subgame(self, root_node, r_us, r_opp, opp_cfv_constraints, T, leaf_value_fn):
+        self.regret.clear()
+        self.strat_sum.clear()
+        root_idx = 0
+        pov_player = int(root_node["nodes"][root_idx].public_state.current_player)
+        iters = int(T) if int(T) > 0 else 1
+
+        for _ in range(iters):
+            self._external_sample_traverse(
+                tree=root_node,
+                idx=root_idx,
+                pov_player=pov_player,
+                r_us=list(r_us),
+                r_opp=list(r_opp),
+                opp_cfv_upper_vec=list(opp_cfv_constraints or []),
+                leaf_value_fn=leaf_value_fn,
+                iw_c=1.0,
+                root_idx=root_idx,
+                apply_root_gadget=True
+            )
+
+        menu0 = root_node["menus"][root_idx]
+        Aall = max(1, max((int(getattr(a, "value", 0)) for a in menu0), default=0) + 1)
+        key0 = self._infoset_key(root_node, root_idx, pov_player)
+        if key0 not in self.strat_sum:
+            k = max(1, len(menu0))
+            root_policy = {a: 1.0 / float(k) for a in menu0}
+        else:
+            ss = self.strat_sum[key0]
+            s = sum(ss[int(getattr(a, "value", 0))] for a in menu0)
+            if s <= 0.0:
+                k = max(1, len(menu0))
+                root_policy = {a: 1.0 / float(k) for a in menu0}
+            else:
+                root_policy = {a: ss[int(getattr(a, "value", 0))] / s for a in menu0}
+
+        node_values = {}
+        opp_cfv = {i: float(opp_cfv_constraints[i]) for i in range(len(opp_cfv_constraints or []))}
+        return root_policy, node_values, opp_cfv
+
 	def set_warm_start(self, warm_start: Optional[Dict[Any, List[float]]] = None) -> None:
 		self._warm_start: Dict[Any, List[float]] = {}
 		if not isinstance(warm_start, dict):
