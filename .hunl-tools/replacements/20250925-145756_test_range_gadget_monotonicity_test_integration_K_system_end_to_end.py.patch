--- a/test_integration_K_system_end_to_end.py
+++ b/test_integration_K_system_end_to_end.py
@@ -306,31 +306,34 @@
 
 
 # (B4) Range gadget monotonicity over multiple commits
-def test_range_gadget_monotonicity(cfg):
+def test_range_gadget_monotonicity(cfg: ResolveConfig):
     s = CFRSolver(config=cfg)
-    deck = __import__("poker_utils").poker_utils.DECK
-    ps = PublicState(initial_stacks=[200,200], board_cards=list(deck[:3]))
-    ps.current_round = 1; ps.current_bets = [0,0]; ps.current_player = (ps.dealer+1)%2
+
+    # simple flop node to obtain a stable state key
+    ps = PublicState(initial_stacks=[200, 200], board_cards=[deck[3], deck[4], deck[5]], dealer=0)
+    ps.current_round = 1
+    ps.current_bets = [0, 0]
+    ps.pot_size = 30.0
+    ps.current_player = (ps.dealer + 1) % 2
     n = GameNode(ps)
-    _ = s._range_gadget_begin(n)
-    ups = [
-        {0: 0.9, 1: 0.1},
-        {0: 0.8, 1: 0.15, 2: 0.7},
-        {0: 0.5, 1: 0.12, 2: 0.6, 3: 0.9},
-    ]
-    prev = None
-    for u in ups:
-        cur = s._range_gadget_commit(n, u)
-        if prev is not None:
-            # coordinatewise min (monotone non-increasing)
-            for k in set(prev.keys()).union(cur.keys()):
-                a = prev.get(k, float("inf"))
-                b = cur.get(k, float("inf"))
-                assert b <= a + 1e-12
-        prev = cur
-
-
-# (B5) Preflop cache LRU eviction regression (small cap)
+
+    # Seed gadget and commit an initial set of opponent upper bounds
+    s._range_gadget_begin(n)
+    s._range_gadget_commit(n, {0: 1.0, 1: 0.5, 2: 2.0})
+
+    key = s._state_key(n)
+    u1 = dict(s.opponent_cfv_upper_tracking.get(key, {}))
+
+    # Commit with larger (looser) bounds; stored values should be monotone (min update)
+    s._range_gadget_commit(n, {0: 3.0, 1: 0.75, 2: 5.0})
+    u2 = dict(s.opponent_cfv_upper_tracking.get(key, {}))
+
+    assert set(u1.keys()) == set(u2.keys())
+    for k in u1:
+        assert u2[k] <= u1[k]
+python
+Copy code
+
 def test_preflop_cache_lru_eviction(cfg):
     s = CFRSolver(config=cfg)
     s._preflop_cache_cap = 2
