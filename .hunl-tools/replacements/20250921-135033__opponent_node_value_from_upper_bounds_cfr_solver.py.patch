--- a/cfr_solver.py
+++ b/cfr_solver.py
@@ -828,21 +828,21 @@
 			probs[i] = probs[i] / total
 			i += 1
 		return probs
-	def _opponent_node_value_from_upper_bounds(self, node, agent_player):
-		if not hasattr(self, "opponent_cfv_upper_tracking"):
-			return 0.0
-		key = self._state_key(node) if hasattr(self, "_state_key") else None
-		if key is None or key not in self.opponent_cfv_upper_tracking:
-			return 0.0
-		upper = self.opponent_cfv_upper_tracking[key]
-		if not upper:
-			return 0.0
-		mx = None
-		for v in upper.values():
-			fv = float(v)
-			if mx is None or fv > mx:
-				mx = fv
-		if mx is None:
-			return 0.0
-		return -float(mx)
-
+    def _opponent_node_value_from_upper_bounds(self, node, agent_player):
+        if not hasattr(self, "opponent_cfv_upper_tracking"):
+            return 0.0
+        key = self._state_key(node) if hasattr(self, "_state_key") else None
+        if key is None or key not in self.opponent_cfv_upper_tracking:
+            return 0.0
+        upper = self.opponent_cfv_upper_tracking[key]
+        if not upper:
+            return 0.0
+        mx = None
+        for v in upper.values():
+            fv = float(v)
+            if mx is None or fv > mx:
+                mx = fv
+        if mx is None:
+            return 0.0
+        return -float(mx)
+
