--- a/data_generator.py
+++ b/data_generator.py
@@ -253,21 +253,25 @@
 
 		return [pot_norm] + list(bvec) + list(r1) + list(r2)
 
-	def prepare_target_values(self, counterfactual_values: Dict[int, Dict[int, List[float]]]) -> List[List[float]]:
-		K = int(self.num_clusters)
-		t1 = [0.0] * K
-		t2 = [0.0] * K
-		cf0 = dict(counterfactual_values.get(0, {}))
-		cf1 = dict(counterfactual_values.get(1, {}))
-		for i in range(K):
-			v0 = cf0.get(i, 0.0)
-			if isinstance(v0, (list, tuple)):
-				t1[i] = float(v0[0]) if len(v0) > 0 else 0.0
-			else:
-				t1[i] = float(v0)
-			v1 = cf1.get(i, 0.0)
-			if isinstance(v1, (list, tuple)):
-				t2[i] = float(v1[0]) if len(v1) > 0 else 0.0
-			else:
-				t2[i] = float(v1)
-		return t1, t2
+    def prepare_target_values(self, counterfactual_values: Dict[int, Dict[int, List[float]]], pot_size: float) -> List[List[float]]:
+        K = int(self.num_clusters)
+        scale = 1.0 / float(pot_size if float(pot_size) > 0.0 else 1.0)
+        t1 = [0.0] * K
+        t2 = [0.0] * K
+        cf0 = dict(counterfactual_values.get(0, {}))
+        cf1 = dict(counterfactual_values.get(1, {}))
+        i = 0
+        while i < K:
+            v0 = cf0.get(i, 0.0)
+            if isinstance(v0, (list, tuple)):
+                t1[i] = float(v0[0]) * scale if len(v0) > 0 else 0.0
+            else:
+                t1[i] = float(v0) * scale
+            v1 = cf1.get(i, 0.0)
+            if isinstance(v1, (list, tuple)):
+                t2[i] = float(v1[0]) * scale if len(v1) > 0 else 0.0
+            else:
+                t2[i] = float(v1) * scale
+            i += 1
+        return t1, t2
+
