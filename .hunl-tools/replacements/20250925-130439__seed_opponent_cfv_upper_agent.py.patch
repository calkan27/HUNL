--- a/agent.py
+++ b/agent.py
@@ -131,24 +131,25 @@
 		if allow_two_pot_river and cr == 3:
 			base.add(ActionType.TWO_POT_BET)
 		return base
-	def _seed_opponent_cfv_upper(self, node):
-		if not hasattr(self.solver, "opponent_cfv_upper_tracking"):
-			self.solver.opponent_cfv_upper_tracking = {}
-		get_key = getattr(self.solver, "_state_key", None)
-		if not callable(get_key):
-			return False
-		cur_key = get_key(node)
-		if cur_key in self.solver.opponent_cfv_upper_tracking:
-			return True
-		if self.last_public_key is not None:
-			try:
-				prev_node = GameNode(node.public_state)
-				setattr(prev_node, "_public_signature", lambda: (tuple(self.last_public_key[0]), int(self.last_public_key[1]), tuple(self.last_public_key[2]), int(self.last_public_key[3]), int(self.last_public_key[4]), int(self.last_public_key[5]), bool(self.last_public_key[6]), bool(self.last_public_key[7]), tuple(self.last_public_key[8]), tuple()))
-				prev_key = get_key(prev_node)
-				prev_upper = dict(getattr(self.solver, "opponent_cfv_upper_tracking", {}).get(prev_key, {}))
-				if prev_upper:
-					self.solver.opponent_cfv_upper_tracking[cur_key] = {int(k): float(v) for k, v in prev_upper.items()}
-					return True
-			except Exception:
-				pass
-		return False
+    def _seed_opponent_cfv_upper(self, node):
+        if not hasattr(self.solver, "opponent_cfv_upper_tracking"):
+            self.solver.opponent_cfv_upper_tracking = {}
+        get_key = getattr(self.solver, "_state_key", None)
+        if not callable(get_key):
+            return False
+        cur_key = get_key(node)
+        if cur_key in self.solver.opponent_cfv_upper_tracking:
+            return True
+        if self.last_public_key is not None:
+            try:
+                prev_node = GameNode(node.public_state)
+                setattr(prev_node, "_public_signature", lambda: self.last_public_key)
+                prev_key = get_key(prev_node)
+                prev_upper = dict(getattr(self.solver, "opponent_cfv_upper_tracking", {}).get(prev_key, {}))
+                if prev_upper:
+                    self.solver.opponent_cfv_upper_tracking[cur_key] = {int(k): float(v) for k, v in prev_upper.items()}
+                    return True
+            except Exception:
+                pass
+        return False
+
