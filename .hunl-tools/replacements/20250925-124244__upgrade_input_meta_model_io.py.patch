--- a/model_io.py
+++ b/model_io.py
@@ -102,36 +102,46 @@
 	}
 
 def _upgrade_input_meta(im):
-		out = dict(im or {})
-		if "board_one_hot_dim" not in out:
-				out["board_one_hot_dim"] = int(out.get("board_one_hot_dim", 52))
-		if "num_clusters" not in out:
-				out["num_clusters"] = int(out.get("num_clusters", 0))
-		if "input_layout" not in out:
-				out["input_layout"] = {"pot_norm": 1, "board_one_hot": int(out["board_one_hot_dim"]), "ranges": {"r1": int(out["num_clusters"]), "r2": int(out["num_clusters"])}}
-		if isinstance(out.get("range_dims", None), int):
-				K = int(out["range_dims"])
-				out["range_dims"] = {"r1": K, "r2": K}
-		if "input_slices" not in out:
-				Ks = int(out.get("num_clusters", 0))
-				B = int(out.get("board_one_hot_dim", 52))
-				start_pn = 0
-				start_b = start_pn + 1
-				start_r1 = start_b + B
-				start_r2 = start_r1 + Ks
-				end_all = start_r2 + Ks
-				out["input_slices"] = {
-						"pot_norm": [start_pn, start_pn + 1],
-						"board_one_hot": [start_b, start_b + B],
-						"r1": [start_r1, start_r1 + Ks],
-						"r2": [start_r2, start_r2 + Ks],
-						"total_input_size": end_all
-				}
-		if "target_units" not in out:
-				out["target_units"] = "pot_fraction"
-		if "outer_zero_sum" not in out:
-				out["outer_zero_sum"] = True
-		return out
+        out = dict(im or {})
+        if "board_one_hot_dim" not in out:
+                out["board_one_hot_dim"] = int(out.get("board_one_hot_dim", 52))
+        if "num_clusters" not in out:
+                out["num_clusters"] = int(out.get("num_clusters", 0))
+        if "input_layout" not in out:
+                out["input_layout"] = {
+                        "pot_norm": 1,
+                        "board_one_hot": int(out["board_one_hot_dim"]),
+                        "range_dims": int(out["num_clusters"]),
+                        "ranges": {"r1": int(out["num_clusters"]), "r2": int(out["num_clusters"])}
+                }
+        else:
+                il = dict(out["input_layout"])
+                if "range_dims" not in il:
+                        il["range_dims"] = int(out.get("num_clusters", 0))
+                out["input_layout"] = il
+        if isinstance(out.get("range_dims", None), int):
+                K = int(out["range_dims"])
+                out["range_dims"] = {"r1": K, "r2": K}
+        if "input_slices" not in out:
+                Ks = int(out.get("num_clusters", 0))
+                B = int(out.get("board_one_hot_dim", 52))
+                start_pn = 0
+                start_b = start_pn + 1
+                start_r1 = start_b + B
+                start_r2 = start_r1 + Ks
+                end_all = start_r2 + Ks
+                out["input_slices"] = {
+                        "pot_norm": [start_pn, start_pn + 1],
+                        "board_one_hot": [start_b, start_b + B],
+                        "r1": [start_r1, start_r1 + Ks],
+                        "r2": [start_r2, start_r2 + Ks],
+                        "total_input_size": end_all
+                }
+        if "target_units" not in out:
+                out["target_units"] = "pot_fraction"
+        if "outer_zero_sum" not in out:
+                out["outer_zero_sum"] = True
+        return out
 
 def load_cfv_bundle(path, device=None):
 	bundle = torch.load(path, map_location=("cpu" if device is None else device))
