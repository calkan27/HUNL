--- a/public_state_streets.py
+++ b/public_state_streets.py
@@ -10,11 +10,50 @@
 		self.consecutive_checks = 0
 		self._last_action_was_call_on_bet = False
 
-	def _min_raise_size(self) -> int:
-		inc = int(getattr(self, "last_raise_increment", 0))
-		if inc < int(getattr(self, "big_blind", 2)):
-			inc = int(getattr(self, "big_blind", 2))
-		return int(inc)
+    def _min_raise_size(self) -> int:
+        val = getattr(self, "last_raise_increment", None)
+
+        if isinstance(val, (int, float, bool)):
+            inc = int(val)
+        elif isinstance(val, (tuple, list)):
+            if len(val) > 0:
+                head = val[0]
+                if isinstance(head, (int, float, bool)):
+                    inc = int(head)
+                else:
+                    inc = 0
+            else:
+                inc = 0
+        else:
+            if callable(val):
+                inc = 0
+            else:
+                if val is None:
+                    inc = 0
+                else:
+                    s = str(val).strip()
+                    if s.lstrip("+-").isdigit():
+                        inc = int(s)
+                    else:
+                        inc = 0
+
+        bb_raw = getattr(self, "big_blind", 2)
+        if isinstance(bb_raw, (int, float, bool)):
+            bb = int(bb_raw)
+        else:
+            sbb = str(bb_raw).strip()
+            if sbb.lstrip("+-").isdigit():
+                bb = int(sbb)
+            else:
+                bb = 2
+
+        if inc < bb:
+            inc = bb
+
+        if inc < 0:
+            inc = 0
+
+        return int(inc)
 
 	def _deal_for_new_street(self) -> None:
 		used = set(list(getattr(self, "board_cards", [])))
