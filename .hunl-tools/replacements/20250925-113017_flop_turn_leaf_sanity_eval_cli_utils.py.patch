--- a/eval_cli_utils.py
+++ b/eval_cli_utils.py
@@ -82,30 +82,31 @@
 
 def flop_turn_leaf_sanity(samples: int = 5, seed: int = 2027) -> Dict[str, int]:
 
-	random.seed(seed)
-	dg = DataGenerator(num_boards=samples, num_samples_per_board=1, player_stack=200, num_clusters=6)
-	dg.cfr_solver.depth_limit = 1
-	dg.cfr_solver.total_iterations = 2
-
-	counters = {"turn_leaf_calls": 0, "flop_calls": 0}
-	orig = dg.cfr_solver.predict_counterfactual_values
-
-	def wrapped(nd, pl):
-		st = dg.cfr_solver.get_stage(nd)
-		if st == "turn":
-			counters["turn_leaf_calls"] += 1
-		if st == "flop":
-			counters["flop_calls"] += 1
-		return orig(nd, pl)
-
-	dg.cfr_solver.predict_counterfactual_values = wrapped
-	for i in range(int(samples)):
-		node = dg._sample_flop_situation(random.Random(seed + i))
-		dg.cfr_solver.run_cfr(node)
-	dg.cfr_solver.predict_counterfactual_values = orig
-
-	return {"samples": int(samples), "turn_leaf_calls": int(counters["turn_leaf_calls"]), "flop_calls": int(counters["flop_calls"])}
-
+        random.seed(seed)
+        dg = DataGenerator(num_boards=samples, num_samples_per_board=1, player_stack=200, num_clusters=6)
+        dg.cfr_solver.depth_limit = 1
+        dg.cfr_solver.total_iterations = 2
+
+        counters = {"turn_leaf_calls": 0, "flop_calls": 0}
+        orig = dg.cfr_solver.predict_counterfactual_values
+
+        def wrapped(nd, pl):
+                st = dg.cfr_solver.get_stage(nd)
+                if st == "turn":
+                        counters["turn_leaf_calls"] += 1
+                if st == "flop":
+                        counters["flop_calls"] += 1
+                return orig(nd, pl)
+
+        dg.cfr_solver.predict_counterfactual_values = wrapped
+        for i in range(int(samples)):
+                node = dg._sample_flop_situation(random.Random(seed + i))
+                dg.cfr_solver.run_cfr(node)
+        dg.cfr_solver.predict_counterfactual_values = orig
+
+        assert int(counters["turn_leaf_calls"]) == 0
+
+        return {"samples": int(samples), "turn_leaf_calls": int(counters["turn_leaf_calls"]), "flop_calls": int(counters["flop_calls"])}
 
 def _sparse_menu(ps: PublicState) -> List[ActionType]:
 
