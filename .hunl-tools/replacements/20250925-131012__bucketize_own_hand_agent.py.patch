--- a/agent.py
+++ b/agent.py
@@ -44,20 +44,12 @@
 		return dict(getattr(self.solver, "_round_iters", {}))
 
     def _bucketize_own_hand(self, cards, board):
-        h = " ".join(cards) if isinstance(cards, (list, tuple)) else str(cards)
-        if hasattr(self.clusterer, "assign"):
-            return int(self.clusterer.assign(h, list(board)))
-        return int(self.clusterer.hand_to_bucket(h))
-
-	def _uniform_range(self):
-		u = 1.0 / float(self.num_clusters) if self.num_clusters > 0 else 0.0
-		return {i: u for i in range(self.num_clusters)}
-
-	def _range_on_bucket(self, cid):
-		r = {i: 0.0 for i in range(self.num_clusters)}
-		if 0 <= int(cid) < self.num_clusters:
-			r[int(cid)] = 1.0
-		return r
+            h = " ".join(cards) if isinstance(cards, (list, tuple)) else str(cards)
+            if hasattr(self.clusterer, "hand_to_bucket_on_board"):
+                    return int(self.clusterer.hand_to_bucket_on_board(h, list(board)))
+            if hasattr(self.clusterer, "assign"):
+                    return int(self.clusterer.assign(h, list(board)))
+            return int(self.clusterer.hand_to_bucket(h))
 
     def _public_key(self, ps):
         return GameNode(ps)._public_signature()
