--- a/hand_clusterer.py
+++ b/hand_clusterer.py
@@ -156,34 +156,30 @@
                 equity += weight * win_percentage
         return equity / total_weight
 
-	def _evaluate_win_percentage(self, hand_cards, opp_hand_cards, board):
-		used_cards = set(hand_cards + opp_hand_cards + board)
-		available_cards = [c for c in DECK if c not in used_cards]
-
-		cards_to_come = 5 - len(board)
-		if cards_to_come <= 0:
-			result = self.cfr_solver._player_wins(hand_cards, opp_hand_cards, board)
-			return 1.0 if result == 1 else (0.5 if result == 0 else 0.0)
-
-		samples = min(self._mc_samples_win, len(available_cards)) if len(available_cards) > 0 else 0
-
-		win_total = 0.0
-		trials = 0
-		for _ in range(samples):
-			if len(available_cards) >= cards_to_come and cards_to_come > 0:
-				picks = random.sample(available_cards, cards_to_come)
-			else:
-				picks = []
-			full_board = board + list(picks)
-			if len(full_board) == 5:
-				result = self.cfr_solver._player_wins(hand_cards, opp_hand_cards, full_board)
-				if result == 1:
-					win_total += 1.0
-				elif result == 0:
-					win_total += 0.5
-				trials += 1
-
-		return (win_total / float(trials)) if trials > 0 else 0.5
+    def _evaluate_win_percentage(self, hand_cards, opp_hand_cards, board):
+        used_cards = set(hand_cards + opp_hand_cards + board)
+        available_cards = [c for c in DECK if c not in used_cards]
+        cards_to_come = 5 - len(board)
+        if cards_to_come <= 0:
+            result = self.cfr_solver._player_wins(hand_cards, opp_hand_cards, board)
+            return 1.0 if result == 1 else (0.5 if result == 0 else 0.0)
+        samples = min(self._mc_samples_win, len(available_cards)) if len(available_cards) > 0 else 0
+        win_total = 0.0
+        trials = 0
+        for _ in range(samples):
+            if len(available_cards) >= cards_to_come and cards_to_come > 0:
+                picks = random.sample(available_cards, cards_to_come)
+            else:
+                picks = []
+            full_board = board + list(picks)
+            if len(full_board) == 5:
+                result = self.cfr_solver._player_wins(hand_cards, opp_hand_cards, full_board)
+                if result == 1:
+                    win_total += 1.0
+                elif result == 0:
+                    win_total += 0.5
+                trials += 1
+        return (win_total / float(trials)) if trials > 0 else 0.5
 
 	def _calculate_potential_equity_improvement(self, hand, board, opponent_range):
 		if len(board) >= 5:
