--- a/config_io.py
+++ b/config_io.py
@@ -164,37 +164,38 @@
 	return runtime_overrides
 
 def _apply_solver_to_cfg(cfg, solv: dict):
-		if isinstance(solv, dict) and "depth_limit" in solv:
-				try:
-						cfg.depth_limit = int(solv["depth_limit"])
-				except Exception:
-						pass
-		if isinstance(solv, dict) and "total_iterations" in solv:
-				try:
-						cfg.total_iterations = int(solv["total_iterations"])
-				except Exception:
-						pass
-		if isinstance(solv, dict) and "bet_size_mode" in solv:
-				try:
-						cfg.bet_size_mode = str(solv["bet_size_mode"])
-				except Exception:
-						pass
-		if isinstance(solv, dict) and "profile" in solv:
-				try:
-						cfg.profile = str(solv["profile"])
-				except Exception:
-						pass
-		if isinstance(solv, dict) and "bet_fractions" in solv and isinstance(solv["bet_fractions"], dict) and len(solv["bet_fractions"]) > 0:
-				try:
-						cfg.bet_fractions = {
-								int(r): [float(x) for x in solv["bet_fractions"][str(r)] if x is not None] if str(r) in solv["bet_fractions"] else [1.0]
-								for r in (0, 1, 2, 3)
-						}
-				except Exception:
-						cfg.bet_fractions = _small_sparse_bet_fractions()
-		else:
-				cfg.bet_fractions = _small_sparse_bet_fractions()
-		return cfg
+                if isinstance(solv, dict) and "depth_limit" in solv:
+                                try:
+                                                cfg.depth_limit = int(solv["depth_limit"])
+                                except Exception:
+                                                pass
+                if isinstance(solv, dict) and "total_iterations" in solv:
+                                try:
+                                                cfg.total_iterations = int(solv["total_iterations"])
+                                except Exception:
+                                                pass
+                if isinstance(solv, dict) and "bet_size_mode" in solv:
+                                try:
+                                                cfg.bet_size_mode = str(solv["bet_size_mode"])
+                                except Exception:
+                                                pass
+                if isinstance(solv, dict) and "profile" in solv:
+                                try:
+                                                cfg.profile = str(solv["profile"])
+                                except Exception:
+                                                pass
+                base_bf = _small_sparse_bet_fractions()
+                if isinstance(solv, dict) and "bet_fractions" in solv and isinstance(solv["bet_fractions"], dict):
+                                try:
+                                                for r in (0, 1, 2, 3):
+                                                                if str(r) in solv["bet_fractions"]:
+                                                                                vals = [float(x) for x in solv["bet_fractions"][str(r)] if x is not None]
+                                                                                if vals:
+                                                                                                base_bf[int(r)] = vals
+                                except Exception:
+                                                base_bf = _small_sparse_bet_fractions()
+                cfg.bet_fractions = base_bf
+                return cfg
 
 def _small_sparse_bet_fractions():
 		return {0: [0.5, 1.0], 1: [0.5, 1.0], 2: [0.5, 1.0], 3: [1.0]}
