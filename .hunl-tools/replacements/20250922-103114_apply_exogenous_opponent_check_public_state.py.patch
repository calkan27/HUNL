--- a/public_state.py
+++ b/public_state.py
@@ -460,22 +460,23 @@
             self._assert_invariants(prev_pot=prev_pot)
             return self
 
-	def apply_exogenous_opponent_check(self, checker):
-		if self.is_terminal:
-			return self
-		if checker not in (0, 1):
-			return self
-		other = (checker + 1) % 2
-		my_bet = self.current_bets[checker]
-		opp_bet = self.current_bets[other]
-		to_call = opp_bet - my_bet
-		if to_call > 0:
-			return self
-		self.last_action = ("EXOGENOUS_CHECK", int(checker))
-		if not self.is_terminal:
-			self.current_player = other
-		return self
-
+    def apply_exogenous_opponent_check(self, checker):
+        if self.is_terminal:
+            return self
+        if checker not in (0, 1):
+            return self
+        other = (checker + 1) % 2
+        my_bet = self.current_bets[checker]
+        opp_bet = self.current_bets[other]
+        to_call = opp_bet - my_bet
+        if to_call > 0:
+            return self
+        prev_pot = float(self.pot_size)
+        self.last_action = ("EXOGENOUS_CHECK", int(checker))
+        if not self.is_terminal:
+            self.current_player = other
+        self._assert_invariants(prev_pot=prev_pot)
+        return self
 
 	def apply_exogenous_opponent_bet(self, bettor, amount):
 		if self.is_terminal:
