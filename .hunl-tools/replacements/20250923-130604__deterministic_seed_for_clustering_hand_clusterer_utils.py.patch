--- a/hand_clusterer_utils.py
+++ b/hand_clusterer_utils.py
@@ -159,14 +159,11 @@
 			acc += float(d)
 		return acc / float(len(sel)) if sel else None
 
-	def _deterministic_seed_for_clustering(self, board: List[str], opponent_range: Dict[Any, float], pot_size: float) -> int:
-		board_key = ",".join(list(board or []))
-		range_sig = self._opponent_range_signature(opponent_range)
-		ps = f"{float(pot_size):.6f}"
-		payload = f"{board_key}|{range_sig}|{ps}".encode("utf-8")
-		h = hashlib.md5(payload).hexdigest()[:16]
-		return int(h, 16)
-
+    def _deterministic_seed_for_clustering(self, board: List[str], opponent_range: Dict[Any, float], pot_size: float) -> int:
+        board_key = ",".join(list(board or []))
+        payload = board_key.encode("utf-8")
+        h = hashlib.md5(payload).hexdigest()[:16]
+        return int(h, 16)
 
 	def _stable_seed(self, hand: Any, board: List[str]) -> int:
 
