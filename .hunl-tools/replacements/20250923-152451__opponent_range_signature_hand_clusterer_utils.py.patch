--- a/hand_clusterer_utils.py
+++ b/hand_clusterer_utils.py
@@ -117,29 +117,27 @@
 		return f"{ranks[x]}{ranks[y]}{s}"
 
 
-	def _opponent_range_signature(self, opponent_range: Dict[Any, float]) -> str:
-
-		if opponent_range is None:
-			return "none"
-		items: List[Tuple[str, str]] = []
-		for k, v in dict(opponent_range).items():
-			if isinstance(k, (int, np.integer)):
-				key = f"c#{int(k)}"
-			else:
-				s = str(k)
-				if " " in s:
-					p = s.split()
-					if len(p) == 2:
-						a, b = p[0], p[1]
-						if a > b:
-							a, b = b, a
-						s = f"{a} {b}"
-				key = s
-			pv = f"{float(v):.6f}"
-			items.append((key, pv))
-		items.sort(key=lambda x: x[0])
-		payload = "|".join([f"{k}:{pv}" for k, pv in items]).encode("utf-8")
-		return hashlib.md5(payload).hexdigest()
+    def _opponent_range_signature(self, opponent_range: Dict[Any, float]) -> str:
+        if opponent_range is None:
+            return "none"
+        acc = {}
+        for k, v in dict(opponent_range).items():
+            if isinstance(k, (int, np.integer)):
+                key = f"c#{int(k)}"
+            else:
+                s = str(k)
+                if " " in s:
+                    p = s.split()
+                    if len(p) == 2:
+                        a, b = p[0], p[1]
+                        if a > b:
+                            a, b = b, a
+                        s = f"{a} {b}"
+                key = s
+            acc[key] = acc.get(key, 0.0) + float(v)
+        items = sorted(((k, f"{float(w):.6f}") for k, w in acc.items()), key=lambda x: x[0])
+        payload = "|".join([f"{k}:{pv}" for k, pv in items]).encode("utf-8")
+        return hashlib.md5(payload).hexdigest()
 
 	def _compute_drift(self, new_features: Dict[str, np.ndarray]) -> float:
 
