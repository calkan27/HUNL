--- a/public_state.py
+++ b/public_state.py
@@ -125,59 +125,8 @@
 	def copy(self):
 		return self.clone()
 
-	def legal_actions(self):
-		out = []
-		p = self.current_player
-		o = (p + 1) % 2
-		my_bet = self.current_bets[p]
-		opp_bet = self.current_bets[o]
-		to_call = opp_bet - my_bet
-		if to_call < 0:
-			to_call = 0
-		min_raise_inc = self._min_raise_size()
-		if to_call > 0:
-			out.append(ActionType.FOLD)
-		out.append(ActionType.CALL)
-		if self.players_in_hand[0] and self.players_in_hand[1]:
-			if to_call == 0:
-				if self.stacks[p] > 0 and self.last_raise_was_allin_below_min is None:
-					hp = max(min_raise_inc, int(self.pot_size * 0.5))
-					if hp > 0 and self.stacks[p] >= hp:
-						out.append(ActionType.HALF_POT_BET)
-					pt = max(min_raise_inc, int(self.pot_size))
-					if pt > 0 and self.stacks[p] >= pt:
-						out.append(ActionType.POT_SIZED_BET)
-					tp = max(min_raise_inc, int(self.pot_size * 2.0))
-					if tp > 0 and self.stacks[p] >= tp:
-						out.append(ActionType.TWO_POT_BET)
-					if self.stacks[p] > 0:
-						out.append(ActionType.ALL_IN)
-			else:
-				if self.stacks[p] > 0:
-					if self.last_raise_was_allin_below_min is None:
-						rem = self.stacks[p] - to_call
-						if rem > 0:
-							pac = self.pot_size + to_call
-							hp = max(min_raise_inc, int(pac * 0.5))
-							if hp > 0 and rem >= hp:
-								out.append(ActionType.HALF_POT_BET)
-							pt = max(min_raise_inc, int(pac))
-							if pt > 0 and rem >= pt:
-								out.append(ActionType.POT_SIZED_BET)
-							tp = max(min_raise_inc, int(pac * 2.0))
-							if tp > 0 and rem >= tp:
-								out.append(ActionType.TWO_POT_BET)
-					out.append(ActionType.ALL_IN)
-		seen = set()
-		filt = []
-		i = 0
-		while i < len(out):
-			a = out[i]
-			if a not in seen:
-				seen.add(a)
-				filt.append(a)
-			i = i + 1
-		return filt
+    def legal_actions(self):
+        return PublicStateUtilsMixin.legal_actions(self)
 
 	def terminal_utility(self) -> List[float]:
 		u = [0.0, 0.0]
