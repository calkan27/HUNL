--- a/test_group_G_river_endgame_and_bucket_aux.py
+++ b/test_group_G_river_endgame_and_bucket_aux.py
@@ -235,6 +235,7 @@
         assert math.isclose(ep + eo, 0.0, rel_tol=0, abs_tol=1e-9)
 
 def test_bucket_level_expectations_zero_sum_and_swap_invariance():
+        print("\n================= DEBUG: bucket_level_zero_sum_and_swap =================")
         re = RiverEndgame()
         B = 6
         rng = random.Random(99)
@@ -242,9 +243,20 @@
         qb = np.asarray([rng.random() for _ in range(B)], dtype=float)
         pb = pb / (pb.sum() if pb.sum() > 0 else 1.0)
         qb = qb / (qb.sum() if qb.sum() > 0 else 1.0)
+        print(f"B={B}")
+        print("p (ours) raw probs:", pb.tolist(), "sum=", float(pb.sum()))
+        print("q (opp)  raw probs:", qb.tolist(), "sum=", float(qb.sum()))
         ev_p, ev_o = re._expected_utility_buckets_both(pb.tolist(), qb.tolist(), B, my_bet=20.0, opp_bet=20.0)
+        print(f"ev_p(p vs q)={ev_p:.12f}  ev_o(p vs q)={ev_o:.12f}  ev_sum={ev_p+ev_o:.12f}")
+        print("assert isclose(ev_p+ev_o, 0)")
         assert math.isclose(ev_p + ev_o, 0.0, abs_tol=1e-10)
         ev_p2, ev_o2 = re._expected_utility_buckets_both(qb.tolist(), pb.tolist(), B, my_bet=20.0, opp_bet=20.0)
+        print(f"ev_p2(q vs p)={ev_p2:.12f}  ev_o2(q vs p)={ev_o2:.12f}  ev_sum2={ev_p2+ev_o2:.12f}")
+        diff_1 = ev_p - (-ev_o2)
+        diff_2 = ev_o - (-ev_p2)
+        print(f"swap check: ev_p ?= -ev_o2  diff={diff_1:.12e}")
+        print(f"swap check: ev_o ?= -ev_p2  diff={diff_2:.12e}")
+        print("assert isclose(ev_p, -ev_o2) and isclose(ev_o, -ev_p2)")
         assert math.isclose(ev_p, -ev_o2, abs_tol=1e-10)
         assert math.isclose(ev_o, -ev_p2, abs_tol=1e-10)
 
