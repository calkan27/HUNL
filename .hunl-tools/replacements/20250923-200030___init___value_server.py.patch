--- a/value_server.py
+++ b/value_server.py
@@ -8,33 +8,34 @@
 
 
 class ValueServer:
-	def __init__(
-		self,
-		models: Dict[str, torch.nn.Module],
-		device: Optional[torch.device] = None,
-		max_batch_size: int = 1024,
-		max_wait_ms: int = 2,
-	):
-		self.models: Dict[str, torch.nn.Module] = {str(k): v for k, v in dict(models).items()}
-		self.device: torch.device = device if device is not None else torch.device(
-			"cuda" if torch.cuda.is_available() else "cpu"
-		)
-		for k in list(self.models.keys()):
-			self.models[k] = self.models[k].to(self.device)
-			self.models[k].eval()
-		self.max_batch: int = int(max_batch_size)
-		self.max_wait_ms: int = int(max_wait_ms)
-		self._q: "queue.Queue[Tuple[str, torch.Tensor, bool, ResultHandle]]" = queue.Queue()
-		self._stop = threading.Event()
-		self._thr: Optional[threading.Thread] = None
-		self._counters: Dict[str, int] = {"preflop": 0, "flop": 0, "turn": 0, "river": 0}
-		self._resid_stats: Dict[str, Dict[str, float]] = {
-			"overall": {"max": 0.0, "sum": 0.0, "count": 0.0},
-			"preflop": {"max": 0.0, "sum": 0.0, "count": 0.0},
-			"flop": {"max": 0.0, "sum": 0.0, "count": 0.0},
-			"turn": {"max": 0.0, "sum": 0.0, "count": 0.0},
-			"river": {"max": 0.0, "sum": 0.0, "count": 0.0},
-		}
+    def __init__(
+        self,
+        models: Dict[str, torch.nn.Module],
+        device: Optional[torch.device] = None,
+        max_batch_size: int = 1024,
+        max_wait_ms: int = 2,
+    ):
+        self.models: Dict[str, torch.nn.Module] = {str(k): v for k, v in dict(models).items()}
+        self.device: torch.device = device if device is not None else torch.device(
+            "cuda" if torch.cuda.is_available() else "cpu"
+        )
+        for k in list(self.models.keys()):
+            self.models[k] = self.models[k].to(self.device)
+            self.models[k].eval()
+        self.max_batch: int = int(max_batch_size)
+        self.max_wait_ms: int = int(max_wait_ms)
+        self._q: "queue.Queue[Tuple[str, torch.Tensor, bool, ResultHandle]]" = queue.Queue()
+        self._stop = threading.Event()
+        self._thr: Optional[threading.Thread] = None
+        self._counters: Dict[str, int] = {"preflop": 0, "flop": 0, "turn": 0, "river": 0}
+        self._resid_stats: Dict[str, Dict[str, float]] = {
+            "overall": {"max": 0.0, "sum": 0.0, "count": 0.0},
+            "preflop": {"max": 0.0, "sum": 0.0, "count": 0.0},
+            "flop": {"max": 0.0, "sum": 0.0, "count": 0.0},
+            "turn": {"max": 0.0, "sum": 0.0, "count": 0.0},
+            "river": {"max": 0.0, "sum": 0.0, "count": 0.0},
+        }
+        self.total_initial_default: float = 400.0
 
 	def start(self) -> None:
 		if self._thr is not None and self._thr.is_alive():
