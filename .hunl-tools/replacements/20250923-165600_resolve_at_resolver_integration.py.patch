--- a/resolver_integration.py
+++ b/resolver_integration.py
@@ -194,7 +194,12 @@
         return {a: float(p) for a, p in root_policy.items()}, {int(k): float(v) for k, v in (opp_cfv or {}).items()}, our_cfv_vec, diag
 
 def resolve_at(public_state, r_us: Dict[int, float], w_opp: Dict[int, float], config: Optional[Dict[str, Any]] = None, value_server: Optional[ValueServer] = None) -> Tuple[Dict[Any, float], Dict[int, float], Dict[int, float]]:
-        pol, w_next, our_cfv, diag = resolve_at_with_diag(public_state, r_us, w_opp, config=config, value_server=value_server)
+        pol, w_next_raw, our_cfv, diag = resolve_at_with_diag(public_state, r_us, w_opp, config=config, value_server=value_server)
+        cm = str(diag.get("constraint_mode", "sp")).strip().lower()
+        if cm == "sp":
+                w_next = dict(w_next_raw)
+        else:
+                w_next = dict(w_opp)
         if not diag.get("range_mass_ok", True):
                 raise ValueError("AcceptanceCheckFailed: range_mass")
         if not diag.get("policy_actions_ok", True):
