--- a/river_endgame.py
+++ b/river_endgame.py
@@ -52,23 +52,23 @@
 			strengths.append(self._strength_key(r))
 		return strengths
 
-	def _pairwise_util_p(self, res, pot_size=None, my_bet=None, opp_bet=None, resolved_pot=None):
-		if my_bet is not None or opp_bet is not None:
-			mb = float(my_bet or 0.0)
-			ob = float(opp_bet or 0.0)
-			if res > 0:
-				return ob
-			elif res < 0:
-				return -mb
-			else:
-				return 0.5 * (ob - mb)
-		P = float(resolved_pot) if resolved_pot is not None else (float(pot_size) if pot_size is not None else 1.0)
-		if res > 0:
-			return P
-		elif res < 0:
-			return -P
-		else:
-			return 0.0
+    def _pairwise_util_p(self, res, pot_size=None, my_bet=None, opp_bet=None, resolved_pot=None):
+        if my_bet is not None or opp_bet is not None:
+            mb = float(my_bet or 0.0)
+            ob = float(opp_bet or 0.0)
+            if res > 0:
+                return ob
+            elif res < 0:
+                return -mb
+            else:
+                return 0.5 * (ob - mb)
+        P = float(resolved_pot) if resolved_pot is not None else (float(pot_size) if pot_size is not None else 1.0)
+        if res > 0:
+            return P
+        elif res < 0:
+            return -P
+        else:
+            return 0.5 * P
 
 	def _expected_utility_buckets_both(self, my_bucket_probs, opp_bucket_probs, B, resolved_pot=None, my_bet=None, opp_bet=None):
 		p = list(my_bucket_probs)
